C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\WorkSpace\MyC
                    -ode\GE_EFM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARN
                    -INGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\WorkSpace\MyCode\GE_E
                    -FM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Dev
                    -ice/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc) PRINT(.\src\Ini
                    -tDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8LB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_BusFreeMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              PORTS_2_enter_BusFreeMode_from_RESET();
  27   1              PBCFG_0_enter_BusFreeMode_from_RESET();
  28   1              CLOCK_0_enter_BusFreeMode_from_RESET();
  29   1              // Restore the SFRPAGE
  30   1              SFRPAGE = SFRPAGE_save;
  31   1              // [Config Calls]$
  32   1      
  33   1      }
  34          
  35          //================================================================================
  36          // PORTS_2_enter_BusFreeMode_from_RESET
  37          //================================================================================
  38          extern void PORTS_2_enter_BusFreeMode_from_RESET(void) {
  39   1              // $[P2 - Port 2 Pin Latch]
  40   1              // [P2 - Port 2 Pin Latch]$
  41   1      
  42   1              // $[P2MDOUT - Port 2 Output Mode]
  43   1              /***********************************************************************
  44   1               - P2.0 output is open-drain
  45   1               - P2.1 output is open-drain
  46   1               - P2.2 output is open-drain
  47   1               - P2.3 output is push-pull
  48   1               - P2.4 output is open-drain
  49   1               - P2.5 output is open-drain
  50   1               - P2.6 output is open-drain
  51   1               ***********************************************************************/
C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 2   

  52   1              SFRPAGE = 0x00;
  53   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
  54   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL
  55   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
  56   1                              | P2MDOUT_B6__OPEN_DRAIN;
  57   1              // [P2MDOUT - Port 2 Output Mode]$
  58   1      
  59   1              // $[P2MDIN - Port 2 Input Mode]
  60   1              // [P2MDIN - Port 2 Input Mode]$
  61   1      
  62   1              // $[P2SKIP - Port 2 Skip]
  63   1              /***********************************************************************
  64   1               - P2.0 pin is not skipped by the crossbar
  65   1               - P2.1 pin is not skipped by the crossbar
  66   1               - P2.2 pin is not skipped by the crossbar
  67   1               - P2.3 pin is skipped by the crossbar
  68   1               ***********************************************************************/
  69   1              SFRPAGE = 0x20;
  70   1              P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
  71   1                              | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
  72   1              // [P2SKIP - Port 2 Skip]$
  73   1      
  74   1              // $[P2MASK - Port 2 Mask]
  75   1              // [P2MASK - Port 2 Mask]$
  76   1      
  77   1              // $[P2MAT - Port 2 Match]
  78   1              // [P2MAT - Port 2 Match]$
  79   1      
  80   1      }
  81          
  82          //================================================================================
  83          // PBCFG_0_enter_BusFreeMode_from_RESET
  84          //================================================================================
  85          extern void PBCFG_0_enter_BusFreeMode_from_RESET(void) {
  86   1              // $[XBR2 - Port I/O Crossbar 2]
  87   1              // [XBR2 - Port I/O Crossbar 2]$
  88   1      
  89   1              // $[PRTDRV - Port Drive Strength]
  90   1              // [PRTDRV - Port Drive Strength]$
  91   1      
  92   1              // $[XBR0 - Port I/O Crossbar 0]
  93   1              // [XBR0 - Port I/O Crossbar 0]$
  94   1      
  95   1              // $[XBR1 - Port I/O Crossbar 1]
  96   1              // [XBR1 - Port I/O Crossbar 1]$
  97   1      
  98   1      }
  99          
 100          //================================================================================
 101          // CIP51_0_enter_BusFreeMode_from_RESET
 102          //================================================================================
 103          extern void CIP51_0_enter_BusFreeMode_from_RESET(void) {
 104   1              // $[PFE0CN - Prefetch Engine Control]
 105   1              // [PFE0CN - Prefetch Engine Control]$
 106   1      
 107   1      }
 108          
 109          //================================================================================
 110          // CLOCK_0_enter_BusFreeMode_from_RESET
 111          //================================================================================
 112          extern void CLOCK_0_enter_BusFreeMode_from_RESET(void) {
 113   1              // $[HFOSC1 Setup]
 114   1              // [HFOSC1 Setup]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 3   

 115   1      
 116   1              // $[CLKSEL - Clock Select]
 117   1              /***********************************************************************
 118   1               - Clock derived from the Internal High Frequency Oscillator 0
 119   1               - SYSCLK is equal to selected clock source divided by 1
 120   1               ***********************************************************************/
 121   1              SFRPAGE = 0x00;
 122   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 123   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 124   1                      ;
 125   1              // [CLKSEL - Clock Select]$
 126   1      
 127   1      }
 128          
 129          extern void enter_DefaultMode_from_BusFreeMode(void) {
 130   1              // $[Config Calls]
 131   1              // Save the SFRPAGE
 132   1              uint8_t SFRPAGE_save = SFRPAGE;
 133   1              WDT_0_enter_DefaultMode_from_BusFreeMode();
 134   1              PORTS_0_enter_DefaultMode_from_BusFreeMode();
 135   1              PORTS_1_enter_DefaultMode_from_BusFreeMode();
 136   1              PBCFG_0_enter_DefaultMode_from_BusFreeMode();
 137   1              TIMER01_0_enter_DefaultMode_from_BusFreeMode();
 138   1              TIMER16_3_enter_DefaultMode_from_BusFreeMode();
 139   1              TIMER_SETUP_0_enter_DefaultMode_from_BusFreeMode();
 140   1              SMBUS_0_enter_DefaultMode_from_BusFreeMode();
 141   1              INTERRUPT_0_enter_DefaultMode_from_BusFreeMode();
 142   1              // Restore the SFRPAGE
 143   1              SFRPAGE = SFRPAGE_save;
 144   1              // [Config Calls]$
 145   1      
 146   1      }
 147          
 148          extern void WDT_0_enter_DefaultMode_from_BusFreeMode(void) {
 149   1              // $[WDTCN - Watchdog Timer Control]
 150   1              SFRPAGE = 0x00;
 151   1              //Disable Watchdog with key sequence
 152   1              WDTCN = 0xDE; //First key
 153   1              WDTCN = 0xAD; //Second key
 154   1              // [WDTCN - Watchdog Timer Control]$
 155   1      
 156   1      }
 157          
 158          extern void PORTS_0_enter_DefaultMode_from_BusFreeMode(void) {
 159   1              // $[P0 - Port 0 Pin Latch]
 160   1              // [P0 - Port 0 Pin Latch]$
 161   1      
 162   1              // $[P0MDOUT - Port 0 Output Mode]
 163   1              // [P0MDOUT - Port 0 Output Mode]$
 164   1      
 165   1              // $[P0MDIN - Port 0 Input Mode]
 166   1              // [P0MDIN - Port 0 Input Mode]$
 167   1      
 168   1              // $[P0SKIP - Port 0 Skip]
 169   1              /***********************************************************************
 170   1               - P0.0 pin is skipped by the crossbar
 171   1               - P0.1 pin is skipped by the crossbar
 172   1               - P0.2 pin is skipped by the crossbar
 173   1               - P0.3 pin is skipped by the crossbar
 174   1               - P0.4 pin is skipped by the crossbar
 175   1               - P0.5 pin is skipped by the crossbar
 176   1               - P0.6 pin is skipped by the crossbar
 177   1               - P0.7 pin is skipped by the crossbar
C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 4   

 178   1               ***********************************************************************/
 179   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 180   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 181   1                              | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
 182   1              // [P0SKIP - Port 0 Skip]$
 183   1      
 184   1              // $[P0MASK - Port 0 Mask]
 185   1              // [P0MASK - Port 0 Mask]$
 186   1      
 187   1              // $[P0MAT - Port 0 Match]
 188   1              // [P0MAT - Port 0 Match]$
 189   1      
 190   1      }
 191          
 192          extern void PORTS_1_enter_DefaultMode_from_BusFreeMode(void) {
 193   1              // $[P1 - Port 1 Pin Latch]
 194   1              // [P1 - Port 1 Pin Latch]$
 195   1      
 196   1              // $[P1MDOUT - Port 1 Output Mode]
 197   1              // [P1MDOUT - Port 1 Output Mode]$
 198   1      
 199   1              // $[P1MDIN - Port 1 Input Mode]
 200   1              // [P1MDIN - Port 1 Input Mode]$
 201   1      
 202   1              // $[P1SKIP - Port 1 Skip]
 203   1              /***********************************************************************
 204   1               - P1.0 pin is skipped by the crossbar
 205   1               - P1.1 pin is skipped by the crossbar
 206   1               - P1.2 pin is not skipped by the crossbar
 207   1               - P1.3 pin is not skipped by the crossbar
 208   1               - P1.4 pin is not skipped by the crossbar
 209   1               - P1.5 pin is not skipped by the crossbar
 210   1               - P1.6 pin is not skipped by the crossbar
 211   1               - P1.7 pin is not skipped by the crossbar
 212   1               ***********************************************************************/
 213   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__NOT_SKIPPED
 214   1                              | P1SKIP_B3__NOT_SKIPPED | P1SKIP_B4__NOT_SKIPPED
 215   1                              | P1SKIP_B5__NOT_SKIPPED | P1SKIP_B6__NOT_SKIPPED
 216   1                              | P1SKIP_B7__NOT_SKIPPED;
 217   1              // [P1SKIP - Port 1 Skip]$
 218   1      
 219   1              // $[P1MASK - Port 1 Mask]
 220   1              // [P1MASK - Port 1 Mask]$
 221   1      
 222   1              // $[P1MAT - Port 1 Match]
 223   1              // [P1MAT - Port 1 Match]$
 224   1      
 225   1      }
 226          
 227          extern void PBCFG_0_enter_DefaultMode_from_BusFreeMode(void) {
 228   1              // $[XBR2 - Port I/O Crossbar 2]
 229   1              /***********************************************************************
 230   1               - Weak Pullups enabled 
 231   1               - Crossbar enabled
 232   1               - UART1 I/O unavailable at Port pin
 233   1               - UART1 RTS1 unavailable at Port pin
 234   1               - UART1 CTS1 unavailable at Port pin
 235   1               ***********************************************************************/
 236   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 237   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 238   1                              | XBR2_URT1CTSE__DISABLED;
 239   1              // [XBR2 - Port I/O Crossbar 2]$
 240   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 5   

 241   1              // $[PRTDRV - Port Drive Strength]
 242   1              // [PRTDRV - Port Drive Strength]$
 243   1      
 244   1              // $[XBR0 - Port I/O Crossbar 0]
 245   1              /***********************************************************************
 246   1               - UART0 I/O unavailable at Port pin
 247   1               - SPI I/O unavailable at Port pins
 248   1               - SMBus 0 I/O routed to Port pins
 249   1               - CP0 unavailable at Port pin
 250   1               - Asynchronous CP0 unavailable at Port pin
 251   1               - CP1 unavailable at Port pin
 252   1               - Asynchronous CP1 unavailable at Port pin
 253   1               - SYSCLK unavailable at Port pin
 254   1               ***********************************************************************/
 255   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 256   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 257   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 258   1              // [XBR0 - Port I/O Crossbar 0]$
 259   1      
 260   1              // $[XBR1 - Port I/O Crossbar 1]
 261   1              // [XBR1 - Port I/O Crossbar 1]$
 262   1      
 263   1      }
 264          
 265          extern void TIMER01_0_enter_DefaultMode_from_BusFreeMode(void) {
 266   1              // $[Timer Initialization]
 267   1              //Save Timer Configuration
 268   1              uint8_t TCON_save;
 269   1              TCON_save = TCON;
 270   1              //Stop Timers
 271   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 272   1      
 273   1              // [Timer Initialization]$
 274   1      
 275   1              // $[TH0 - Timer 0 High Byte]
 276   1              /***********************************************************************
 277   1               - Timer 0 High Byte = 0x38
 278   1               ***********************************************************************/
 279   1              TH0 = (0x38 << TH0_TH0__SHIFT);
 280   1              // [TH0 - Timer 0 High Byte]$
 281   1      
 282   1              // $[TL0 - Timer 0 Low Byte]
 283   1              /***********************************************************************
 284   1               - Timer 0 Low Byte = 0x13
 285   1               ***********************************************************************/
 286   1              TL0 = (0x13 << TL0_TL0__SHIFT);
 287   1              // [TL0 - Timer 0 Low Byte]$
 288   1      
 289   1              // $[TH1 - Timer 1 High Byte]
 290   1              /***********************************************************************
 291   1               - Timer 1 High Byte = 0x34
 292   1               ***********************************************************************/
 293   1              TH1 = (0x34 << TH1_TH1__SHIFT);
 294   1              // [TH1 - Timer 1 High Byte]$
 295   1      
 296   1              // $[TL1 - Timer 1 Low Byte]
 297   1              /***********************************************************************
 298   1               - Timer 1 Low Byte = 0x34
 299   1               ***********************************************************************/
 300   1              TL1 = (0x34 << TL1_TL1__SHIFT);
 301   1              // [TL1 - Timer 1 Low Byte]$
 302   1      
 303   1              // $[Timer Restoration]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 6   

 304   1              //Restore Timer Configuration
 305   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 306   1      
 307   1              // [Timer Restoration]$
 308   1      
 309   1      }
 310          
 311          extern void TIMER16_3_enter_DefaultMode_from_BusFreeMode(void) {
 312   1              // $[Timer Initialization]
 313   1              // Save Timer Configuration
 314   1              uint8_t TMR3CN0_TR3_save;
 315   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 316   1              // Stop Timer
 317   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 318   1              // [Timer Initialization]$
 319   1      
 320   1              // $[TMR3CN1 - Timer 3 Control 1]
 321   1              // [TMR3CN1 - Timer 3 Control 1]$
 322   1      
 323   1              // $[TMR3CN0 - Timer 3 Control]
 324   1              // [TMR3CN0 - Timer 3 Control]$
 325   1      
 326   1              // $[TMR3H - Timer 3 High Byte]
 327   1              // [TMR3H - Timer 3 High Byte]$
 328   1      
 329   1              // $[TMR3L - Timer 3 Low Byte]
 330   1              // [TMR3L - Timer 3 Low Byte]$
 331   1      
 332   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 333   1              /***********************************************************************
 334   1               - Timer 3 Reload High Byte = 0x38
 335   1               ***********************************************************************/
 336   1              TMR3RLH = (0x38 << TMR3RLH_TMR3RLH__SHIFT);
 337   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 338   1      
 339   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 340   1              /***********************************************************************
 341   1               - Timer 3 Reload Low Byte = 0x9E
 342   1               ***********************************************************************/
 343   1              TMR3RLL = (0x9E << TMR3RLL_TMR3RLL__SHIFT);
 344   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 345   1      
 346   1              // $[TMR3CN0]
 347   1              /***********************************************************************
 348   1               - Start Timer 3 running
 349   1               ***********************************************************************/
 350   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 351   1              // [TMR3CN0]$
 352   1      
 353   1              // $[Timer Restoration]
 354   1              // Restore Timer Configuration
 355   1              TMR3CN0 |= TMR3CN0_TR3_save;
 356   1              // [Timer Restoration]$
 357   1      
 358   1      }
 359          
 360          extern void TIMER_SETUP_0_enter_DefaultMode_from_BusFreeMode(void) {
 361   1              // $[CKCON0 - Clock Control 0]
 362   1              /***********************************************************************
 363   1               - System clock divided by 4
 364   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 365   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 366   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 7   

 367   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 368   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 369   1               - Timer 1 uses the clock defined by the prescale field, SCA
 370   1               ***********************************************************************/
 371   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 372   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 373   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 374   1                              | CKCON0_T1M__PRESCALE;
 375   1              // [CKCON0 - Clock Control 0]$
 376   1      
 377   1              // $[CKCON1 - Clock Control 1]
 378   1              // [CKCON1 - Clock Control 1]$
 379   1      
 380   1              // $[TMOD - Timer 0/1 Mode]
 381   1              /***********************************************************************
 382   1               - Mode 0, 13-bit Counter/Timer
 383   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 384   1               - Timer Mode
 385   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 386   1               - Timer Mode
 387   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 388   1               ***********************************************************************/
 389   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 390   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 391   1              // [TMOD - Timer 0/1 Mode]$
 392   1      
 393   1              // $[TCON - Timer 0/1 Control]
 394   1              /***********************************************************************
 395   1               - Start Timer 1 running
 396   1               ***********************************************************************/
 397   1              TCON |= TCON_TR1__RUN;
 398   1              // [TCON - Timer 0/1 Control]$
 399   1      
 400   1      }
 401          
 402          extern void SMBUS_0_enter_DefaultMode_from_BusFreeMode(void) {
 403   1              // $[SMB0FCN0 - SMBus0 FIFO Control 0]
 404   1              // [SMB0FCN0 - SMBus0 FIFO Control 0]$
 405   1      
 406   1              // $[SMB0RXLN - SMBus0 Receive Length Counter]
 407   1              // [SMB0RXLN - SMBus0 Receive Length Counter]$
 408   1      
 409   1              // $[SMB0ADR - SMBus 0 Slave Address]
 410   1              // [SMB0ADR - SMBus 0 Slave Address]$
 411   1      
 412   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 413   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
 414   1      
 415   1              // $[SMB0TC - SMBus 0 Timing and Pin Control]
 416   1              // [SMB0TC - SMBus 0 Timing and Pin Control]$
 417   1      
 418   1              // $[SMB0CF - SMBus 0 Configuration]
 419   1              /***********************************************************************
 420   1               - Timer 1 Overflow
 421   1               - Slave states are inhibited
 422   1               - Enable the SMBus module
 423   1               - Enable bus free timeouts
 424   1               - Enable SCL low timeouts if Timer 3 RLFSEL is set appropriately
 425   1               - Enable SDA extended setup and hold times
 426   1               ***********************************************************************/
 427   1              SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 428   1              SMB0CF |= SMB0CF_SMBCS__TIMER1 | SMB0CF_INH__SLAVE_DISABLED
 429   1                              | SMB0CF_ENSMB__ENABLED | SMB0CF_SMBFTE__FREE_TO_ENABLED
C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 8   

 430   1                              | SMB0CF_SMBTOE__SCL_TO_ENABLED | SMB0CF_EXTHOLD__ENABLED;
 431   1              // [SMB0CF - SMBus 0 Configuration]$
 432   1      
 433   1      }
 434          
 435          extern void INTERRUPT_0_enter_DefaultMode_from_BusFreeMode(void) {
 436   1              // $[EIE1 - Extended Interrupt Enable 1]
 437   1              /***********************************************************************
 438   1               - Disable ADC0 Conversion Complete interrupt
 439   1               - Disable ADC0 Window Comparison interrupt
 440   1               - Disable CP0 interrupts
 441   1               - Disable CP1 interrupts
 442   1               - Disable all Port Match interrupts
 443   1               - Disable all PCA0 interrupts
 444   1               - Enable interrupt requests generated by SMB0
 445   1               - Enable interrupt requests generated by the TF3L or TF3H flags
 446   1               ***********************************************************************/
 447   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 448   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 449   1                              | EIE1_ESMB0__ENABLED | EIE1_ET3__ENABLED;
 450   1              // [EIE1 - Extended Interrupt Enable 1]$
 451   1      
 452   1              // $[EIE2 - Extended Interrupt Enable 2]
 453   1              // [EIE2 - Extended Interrupt Enable 2]$
 454   1      
 455   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 456   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 457   1      
 458   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 459   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 460   1      
 461   1              // $[EIP2 - Extended Interrupt Priority 2]
 462   1              // [EIP2 - Extended Interrupt Priority 2]$
 463   1      
 464   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 465   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 466   1      
 467   1              // $[IE - Interrupt Enable]
 468   1              /***********************************************************************
 469   1               - Enable each interrupt according to its individual mask setting
 470   1               - Disable external interrupt 0
 471   1               - Disable external interrupt 1
 472   1               - Disable all SPI0 interrupts
 473   1               - Disable all Timer 0 interrupt
 474   1               - Disable all Timer 1 interrupt
 475   1               - Disable Timer 2 interrupt
 476   1               - Disable UART0 interrupt
 477   1               ***********************************************************************/
 478   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 479   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 480   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 481   1              // [IE - Interrupt Enable]$
 482   1      
 483   1              // $[IP - Interrupt Priority]
 484   1              // [IP - Interrupt Priority]$
 485   1      
 486   1              // $[IPH - Interrupt Priority High]
 487   1              // [IPH - Interrupt Priority High]$
 488   1      
 489   1      }
 490          


C51 COMPILER V9.53.0.0   INITDEVICE                                                        12/30/2017 17:39:16 PAGE 9   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    172    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
