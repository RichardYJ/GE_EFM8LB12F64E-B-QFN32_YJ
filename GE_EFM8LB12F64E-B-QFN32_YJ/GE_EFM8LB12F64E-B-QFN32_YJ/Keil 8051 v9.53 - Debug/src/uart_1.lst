C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART_1
OBJECT MODULE PLACED IN .\src\uart_1.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\WorkSpace\MyC
                    -ode\GE_EFM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\src\uart_1.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGL
                    -EVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\WorkSpace\MyCode\GE_EFM8L
                    -B12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/
                    -shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc) PRINT(.\src\uart_1.
                    -lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\uart_1.OBJ)

line level    source

   1          
   2          #include "uart_1.h"
   3          
   4          #if EFM8PDL_UART1_AUTO_PAGE == 1
   5          
   6          #define DECL_PAGE uint8_t savedPage
   7          
   8          #define SET_PAGE(p)     do                                                    \
   9                                  {                                                     \
  10                                    savedPage = SFRPAGE;     \
  11                                    SFRPAGE = (p);                    \
  12                                  } while(0)
  13          
  14          #define RESTORE_PAGE    do                                                    \
  15                                  {                                                     \
  16                                    SFRPAGE = savedPage;    \
  17                                  } while(0)
  18          
  19          #else
              #define DECL_PAGE
              #define SET_PAGE(x)
              #define RESTORE_PAGE
              #endif 
  24          
  25          
  26          #define UART1_SFR_PAGE 0x20
  27          
  28          
  29          #define NUM_PRESC 8
  30          static const uint8_t PRESC[NUM_PRESC]      = {1, 4, 8, 12, 16, 24, 32, 48};
  31          static const uint8_t PRESC_ENUM[NUM_PRESC] = {SBCON1_BPS__DIV_BY_1,  SBCON1_BPS__DIV_BY_4,  SBCON1_BPS__DI
             -V_BY_8,  SBCON1_BPS__DIV_BY_12,
  32                                                        SBCON1_BPS__DIV_BY_16, SBCON1_BPS__DIV_BY_24, SBCON1_BPS__DI
             -V_BY_32, SBCON1_BPS__DIV_BY_48};
  33          static void UART1_initBaudRate(uint32_t sysclk, uint32_t baudrate)
  34          {
  35   1        uint8_t i;
  36   1        uint8_t min_presc;
  37   1        uint16_t reload;
  38   1        DECL_PAGE;
  39   1        SET_PAGE(UART1_SFR_PAGE);
  40   1      
  41   1        min_presc = ((*((uint16_t*)(&sysclk)) >> 1) + baudrate) / baudrate; 
  42   1        for(i = 0; i < NUM_PRESC; ++i)
  43   1        {
  44   2          if(PRESC[i] >= min_presc) 
  45   2          {
  46   3            reload  = ((1 << 16) - (sysclk / (2 * baudrate * PRESC[i]))); 
  47   3            SBRLH1  = (reload >> 8) & 0xFF;
  48   3            SBRLL1  = reload & 0xFF;
  49   3            SBCON1 |= (SBCON1_BREN__ENABLED | PRESC_ENUM[i]); 
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 2   

  50   3            RESTORE_PAGE;
  51   3            return;
  52   3          }
  53   2        }
  54   1      
  55   1      
  56   1        while(1);
  57   1      }
  58          
  59          
  60          #if (EFM8PDL_UART1_AUTO_PAGE == 1)
  61          uint8_t UART1_getIntFlags(void)
  62          {
  63   1        uint8_t val;
  64   1        DECL_PAGE;
  65   1        SET_PAGE(UART1_SFR_PAGE);
  66   1        val = SCON1 & (UART1_TX_IF | UART1_RX_IF);
  67   1        RESTORE_PAGE;
  68   1        return val;
  69   1      }
  70          
  71          void UART1_clearIntFlags(uint8_t flags)
  72          {
  73   1        DECL_PAGE;
  74   1        SET_PAGE(UART1_SFR_PAGE);
  75   1        SCON1 &= ~(flags);
  76   1        RESTORE_PAGE;
  77   1      }
  78          
  79          void UART1_enableTxInt(bool enable)
  80          {
  81   1        DECL_PAGE;
  82   1        SET_PAGE(UART1_SFR_PAGE);
  83   1        UART1FCN1_TIE = enable;
  84   1        RESTORE_PAGE;
  85   1      }
  86          
  87          void UART1_enableRxInt(bool enable)
  88          {
  89   1        DECL_PAGE;
  90   1        SET_PAGE(UART1_SFR_PAGE);
  91   1        UART1FCN1_RIE = enable;
  92   1        RESTORE_PAGE;
  93   1      }
  94          
  95          void UART1_initTxPolling(void)
  96          {
  97   1        DECL_PAGE;
  98   1        SET_PAGE(UART1_SFR_PAGE);
  99   1        SCON1_TI = 1;
 100   1        RESTORE_PAGE;
 101   1      }
 102          
 103          void UART1_write(uint8_t value)
 104          {
 105   1        DECL_PAGE;
 106   1        SET_PAGE(UART1_SFR_PAGE);
 107   1        SBUF1 = value;
 108   1        RESTORE_PAGE;
 109   1      }
 110          
 111          uint8_t UART1_read(void)
 112          {
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 3   

 113   1        uint8_t val;
 114   1        DECL_PAGE;
 115   1        SET_PAGE(UART1_SFR_PAGE);
 116   1        val = SBUF1;
 117   1        RESTORE_PAGE;
 118   1        return val;
 119   1      }
 120          #endif
 121          
 122          void UART1_writeWithExtraBit(uint16_t value)
 123          {
 124   1        uint8_t shift, mask;
 125   1        DECL_PAGE;
 126   1        SET_PAGE(UART1_SFR_PAGE);
 127   1      
 128   1      
 129   1        shift = ((SMOD1 & SMOD1_SDL__FMASK) >> SMOD1_SDL__SHIFT) + 5;
 130   1        mask = 0xFF >> (8 - shift);
 131   1      
 132   1        SCON1_TBX = (value >> shift) & 0x1;
 133   1        SBUF1 = (value & mask);
 134   1      
 135   1        RESTORE_PAGE;
 136   1      }
 137          
 138          uint16_t UART1_readWithExtraBit(void)
 139          {
 140   1        uint8_t shift, mask;
 141   1        uint16_t val;
 142   1        DECL_PAGE;
 143   1        SET_PAGE(UART1_SFR_PAGE);
 144   1      
 145   1      
 146   1        shift = ((SMOD1 & SMOD1_SDL__FMASK) >> SMOD1_SDL__SHIFT) + 5;
 147   1        mask = 0xFF >> (8 - shift);
 148   1      
 149   1        val = SCON1_RBX;
 150   1        val = val << shift;
 151   1        val |= (SBUF1 & mask);
 152   1      
 153   1        RESTORE_PAGE;
 154   1        return val;
 155   1      }
 156          
 157          #if (EFM8PDL_UART1_AUTO_PAGE == 1)
 158          uint8_t UART1_getErrFlags(void)
 159          {
 160   1        uint8_t val;
 161   1        DECL_PAGE;
 162   1        SET_PAGE(UART1_SFR_PAGE);
 163   1        val = (SCON1 & (UART1_RXOVR_EF | UART1_PARITY_EF));
 164   1        RESTORE_PAGE;
 165   1        return val;
 166   1      }
 167          
 168          void UART1_clearErrFlags(uint8_t flags)
 169          {
 170   1        DECL_PAGE;
 171   1        SET_PAGE(UART1_SFR_PAGE);
 172   1        SCON1 &= ~flags;
 173   1        RESTORE_PAGE;
 174   1      }
 175          
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 4   

 176          uint8_t UART1_getFifoIntFlags(void)
 177          {
 178   1        uint8_t val;
 179   1        DECL_PAGE;
 180   1        SET_PAGE(UART1_SFR_PAGE);
 181   1        val = UART1FCN1 & (UART1_TFRQ_IF | UART1_RFRQ_IF);
 182   1        RESTORE_PAGE;
 183   1        return val;
 184   1      }
 185          #endif
 186          
 187          void UART1_enableTxFifoInt(bool enable)
 188          {
 189   1        DECL_PAGE;
 190   1        SET_PAGE(UART1_SFR_PAGE);
 191   1        if(enable)
 192   1        {
 193   2          UART1FCN0 |= UART1FCN0_TFRQE__ENABLED;
 194   2        }
 195   1        else
 196   1        {
 197   2          UART1FCN0 &= ~UART1FCN0_TFRQE__ENABLED;
 198   2        }
 199   1        RESTORE_PAGE;
 200   1      }
 201          
 202          void UART1_enableRxFifoInt(bool enable)
 203          {
 204   1        DECL_PAGE;
 205   1        SET_PAGE(UART1_SFR_PAGE);
 206   1        if(enable)
 207   1        {
 208   2          UART1FCN0 |= UART1FCN0_RFRQE__ENABLED;
 209   2        }
 210   1        else
 211   1        {
 212   2          UART1FCN0 &= ~UART1FCN0_RFRQE__ENABLED;
 213   2        }
 214   1        RESTORE_PAGE;
 215   1      }
 216          
 217          #if (EFM8PDL_UART1_AUTO_PAGE == 1)
 218          uint8_t UART1_getTxFifoCount(void)
 219          {
 220   1        uint8_t txcnt;
 221   1        DECL_PAGE;
 222   1        SET_PAGE(UART1_SFR_PAGE);
 223   1        txcnt = (UART1FCT & UART1FCT_TXCNT__FMASK) >> UART1FCT_TXCNT__SHIFT;
 224   1        RESTORE_PAGE;
 225   1        return txcnt;
 226   1      }
 227          
 228          uint8_t UART1_getRxFifoCount(void)
 229          {
 230   1        uint8_t rxcnt;
 231   1        DECL_PAGE;
 232   1        SET_PAGE(UART1_SFR_PAGE);
 233   1        rxcnt = (UART1FCT & UART1FCT_RXCNT__FMASK) >> UART1FCT_RXCNT__SHIFT;
 234   1        RESTORE_PAGE;
 235   1        return rxcnt;
 236   1      }
 237          #endif
 238          
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 5   

 239          bool UART1_isTxFifoFull(void){
 240   1        bool txfull;
 241   1        DECL_PAGE;
 242   1        SET_PAGE(UART1_SFR_PAGE);
 243   1        if(UART1FCN1 & UART1FCN1_TXNF__NOT_FULL)
 244   1        {
 245   2          txfull = false;
 246   2        }
 247   1        else
 248   1        {
 249   2          txfull = true;
 250   2        }
 251   1        RESTORE_PAGE;
 252   1        return txfull;
 253   1      }
 254          
 255          void UART1_stallTxFifo(bool enable)
 256          {
 257   1        DECL_PAGE;
 258   1        SET_PAGE(UART1_SFR_PAGE);
 259   1        if(enable)
 260   1        {
 261   2          UART1FCN1 |= UART1FCN1_TXHOLD__HOLD;
 262   2        }
 263   1        else
 264   1        {
 265   2          UART1FCN1 &= ~UART1FCN1_TXHOLD__HOLD;
 266   2        }
 267   1        RESTORE_PAGE;
 268   1      }
 269          
 270          #if (EFM8PDL_UART1_AUTO_PAGE == 1)
 271          void UART1_flushTxFifo(void)
 272          {
 273   1        DECL_PAGE;
 274   1        SET_PAGE(UART1_SFR_PAGE);
 275   1        UART1FCN0 |= UART1FCN0_TFLSH__FLUSH;
 276   1        RESTORE_PAGE;
 277   1      }
 278          
 279          void UART1_flushRxFifo(void)
 280          {
 281   1        DECL_PAGE;
 282   1        SET_PAGE(UART1_SFR_PAGE);
 283   1        UART1FCN0 |= UART1FCN0_RFLSH__FLUSH;
 284   1        RESTORE_PAGE;
 285   1      }
 286          
 287          uint8_t UART1_getAutobaudIntFlag(void)
 288          {
 289   1        uint8_t val;
 290   1        DECL_PAGE;
 291   1        SET_PAGE(UART1_SFR_PAGE);
 292   1        val = UART1LIN & UART1_AUTOBAUD_IF;
 293   1        RESTORE_PAGE;
 294   1        return val;
 295   1      }
 296          
 297          void UART1_clearAutobaudIntFlag(void)
 298          {
 299   1        DECL_PAGE;
 300   1        SET_PAGE(UART1_SFR_PAGE);
 301   1        UART1LIN &= ~UART1_AUTOBAUD_IF;
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 6   

 302   1        RESTORE_PAGE;
 303   1      }
 304          #endif
 305          
 306          void UART1_enableAutobaud(bool enable)
 307          {
 308   1        DECL_PAGE;
 309   1        SET_PAGE(UART1_SFR_PAGE);
 310   1        if(enable)
 311   1        {
 312   2          UART1LIN |= (UART1LIN_AUTOBDE__ENABLED | UART1LIN_SYNCDIE__ENABLED);
 313   2        }
 314   1        else
 315   1        {
 316   2          UART1LIN &= ~(UART1LIN_AUTOBDE__ENABLED | UART1LIN_SYNCDIE__ENABLED);
 317   2        }
 318   1        RESTORE_PAGE;
 319   1      }
 320          
 321          
 322          void UART1_init(uint32_t sysclk, uint32_t baudrate, 
 323                          UART1_DataLen_t datalen, UART1_StopLen_t stoplen, 
 324                          UART1_FeatureBit_t featbit, UART1_ParityType_t partype,
 325                          UART1_RxEnable_t rxen, UART1_RxSelect_t rxsel, 
 326                          UART1_Multiproc_t mcen)
 327          {
 328   1        DECL_PAGE;
 329   1        SET_PAGE(UART1_SFR_PAGE);
 330   1        UART1_initBaudRate(sysclk, baudrate);
 331   1        SCON1 = rxen;
 332   1        UART1PCF = rxsel;
 333   1        SMOD1 = datalen | stoplen | featbit | partype | mcen;
 334   1        RESTORE_PAGE;
 335   1      }
 336          
 337          void UART1_initWithAutobaud(UART1_BrPrescaler_t presc, UART1_StopLen_t stoplen,
 338                                      UART1_FeatureBit_t featbit, UART1_ParityType_t partype,
 339                                      UART1_RxEnable_t rxen, UART1_RxSelect_t rxsel,
 340                                      UART1_Multiproc_t mcen)
 341          {
 342   1        DECL_PAGE;
 343   1        SET_PAGE(UART1_SFR_PAGE);
 344   1        SCON1 = rxen;
 345   1        UART1PCF = rxsel;  
 346   1        SMOD1 = SMOD1_SDL__8_BITS | stoplen | featbit | partype | mcen;
 347   1        UART1LIN = (UART1LIN_AUTOBDE__ENABLED | UART1LIN_SYNCDIE__ENABLED);
 348   1        SBCON1 = (SBCON1_BREN__ENABLED | presc);
 349   1        RESTORE_PAGE;
 350   1      }
 351          
 352          void UART1_reset(void)
 353          {
 354   1        DECL_PAGE;
 355   1        SET_PAGE(UART1_SFR_PAGE);
 356   1        SCON1 = SCON1_OVR__NOT_SET
 357   1                | SCON1_PERR__NOT_SET
 358   1                | SCON1_REN__RECEIVE_DISABLED
 359   1                | SCON1_TBX__LOW
 360   1                | SCON1_RBX__LOW
 361   1                | SCON1_TI__NOT_SET
 362   1                | SCON1_RI__NOT_SET;
 363   1        UART1PCF = UART1PCF_RXSEL__CROSSBAR;            
 364   1        SMOD1 = SMOD1_MCE__MULTI_DISABLED
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 7   

 365   1                | SMOD1_SPT__ODD_PARITY
 366   1                | SMOD1_PE__PARITY_DISABLED
 367   1                | SMOD1_SDL__8_BITS
 368   1                | SMOD1_XBE__DISABLED
 369   1                | SMOD1_SBL__SHORT;
 370   1        SBCON1 = SBCON1_BREN__DISABLED
 371   1                 | SBCON1_BPS__DIV_BY_1;
 372   1        UART1LIN = (UART1LIN_AUTOBDE__DISABLED | UART1LIN_SYNCDIE__DISABLED);
 373   1        RESTORE_PAGE;
 374   1      }
 375          
 376          void UART1_initTxFifo(UART1_TxFifoThreshold_t txth, UART1_TxFifoInt_t txint)
 377          {
 378   1        DECL_PAGE;
 379   1        SET_PAGE(UART1_SFR_PAGE);
 380   1      
 381   1        UART1FCN0 &= ~(UART1FCN0_TFRQE__BMASK
 382   1                       | UART1FCN0_TFLSH__BMASK
 383   1                       | UART1FCN0_TXTH__FMASK
 384   1                       | UART1FCN0_TFRQE__BMASK);
 385   1        UART1FCN0 |= (txth | txint);
 386   1      
 387   1        UART1FCN1 &= ~(UART1FCN1_TFRQ__BMASK
 388   1                       | UART1FCN1_TXHOLD__BMASK
 389   1                       | UART1FCN1_TXNF__BMASK
 390   1                       | UART1FCN1_TIE__BMASK);
 391   1        UART1FCN1 |= (UART1FCN1_TFRQ__SET
 392   1                      | UART1FCN1_TXHOLD__CONTINUE
 393   1                      | UART1FCN1_TIE__DISABLED);
 394   1      
 395   1        RESTORE_PAGE;
 396   1      }
 397          
 398          void UART1_initRxFifo(UART1_RxFiFoThreshold_t rxth, UART1_RxFifoTimeout_t rxto,
 399                                UART1_RxFifoInt_t rxint)
 400          {
 401   1        DECL_PAGE;
 402   1        SET_PAGE(UART1_SFR_PAGE);
 403   1      
 404   1        UART1FCN0 &= ~(UART1FCN0_RFRQE__BMASK
 405   1                       | UART1FCN0_RFLSH__BMASK
 406   1                       | UART1FCN0_RXTH__FMASK
 407   1                       | UART1FCN0_RFRQE__BMASK);
 408   1        UART1FCN0 |= (rxth | rxint);
 409   1      
 410   1        UART1FCN1 &= ~(UART1FCN1_RFRQ__BMASK
 411   1                       | UART1FCN1_RXTO__FMASK
 412   1                       | UART1FCN1_RIE__BMASK);
 413   1        UART1FCN1 |= (UART1FCN1_RFRQ__SET
 414   1                      | rxto
 415   1                      | UART1FCN1_RIE__DISABLED);
 416   1      
 417   1        RESTORE_PAGE;
 418   1      }
 419          
 420          #if EFM8PDL_UART1_USE_BUFFER == 1
              
              SI_SEGMENT_VARIABLE(txRemaining, static uint8_t, SI_SEG_XDATA) = 0;
              SI_SEGMENT_VARIABLE(rxRemaining, static uint8_t, SI_SEG_XDATA) = 0;
              SI_SEGMENT_VARIABLE_SEGMENT_POINTER(txBuffer, static uint8_t, EFM8PDL_UART1_TX_BUFTYPE, SI_SEG_XDATA);
              SI_SEGMENT_VARIABLE_SEGMENT_POINTER(rxBuffer, static uint8_t, EFM8PDL_UART1_RX_BUFTYPE, SI_SEG_XDATA);
              
              SI_INTERRUPT(UART1_ISR, UART1_IRQn)
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 8   

              {
              #if (EFM8PDL_UART1_USE_ERR_CALLBACK == 1)
                uint8_t discard;
                uint8_t errors;
              #endif 
              
                
                if (UART1LIN & UART1_AUTOBAUD_IF)
                {
                  UART1LIN &= ~(UART1_AUTOBAUD_IF | UART1LIN_AUTOBDE__ENABLED | UART1LIN_SYNCDIE__ENABLED);
                }
                
              
                
                if ((UART1FCN1 & UART1_RFRQ_IF) && (UART1FCN0 & UART1FCN0_RFRQE__ENABLED))
                {
                  while (rxRemaining && ((UART1FCT & UART1FCT_RXCNT__FMASK) >> UART1FCT_RXCNT__SHIFT))
                  {
              #if (EFM8PDL_UART1_USE_ERR_CALLBACK == 1)
              
                    errors = SCON1 & (UART1_RXOVR_EF | UART1_PARITY_EF);
                    if(errors)
                    {
                      SCON1 &= ~errors;
                      UART1_transferErrorCb(errors);
                    }
              
              
                    if (errors & UART1_PARITY_EF)
                    {
                      discard = SBUF1;
                    }
                    else
              #endif 
                    {
                      *rxBuffer = SBUF1;
                       ++rxBuffer;
                      --rxRemaining;
                      if (!rxRemaining)
                      {
                        UART1_receiveCompleteCb();
                      }
                    }
                  }
                  if(!rxRemaining)
                  {
                    UART1FCN0 |= UART1FCN0_RFLSH__FLUSH;
                  }
                }
              
              
                if ((UART1FCN1 &  UART1_TFRQ_IF) && (UART1FCN0 & UART1FCN0_TFRQE__ENABLED))
                {
                  while (txRemaining && (UART1FCN1 & UART1FCN1_TXNF__NOT_FULL))
                  {
                    SBUF1 = *txBuffer;
                    ++txBuffer;
                    --txRemaining;
                  }
                  if(!txRemaining)
                  {
                    UART1_transmitCompleteCb();
                  }
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 9   

                }
              }
              
              void UART1_writeBuffer(SI_VARIABLE_SEGMENT_POINTER(buffer, uint8_t, EFM8PDL_UART1_RX_BUFTYPE),
                                     uint8_t length)
              {
              
                txBuffer = buffer;
                txRemaining = length;
              
              
                UART1FCN0 |= UART1FCN0_TFRQE__ENABLED;
              }
              
              void UART1_readBuffer(SI_VARIABLE_SEGMENT_POINTER(buffer, uint8_t, EFM8PDL_UART1_TX_BUFTYPE),
                                    uint8_t length)
              {
                rxBuffer = buffer;
                rxRemaining = length;
              }
              
              void UART1_abortTx(void)
              {
                txRemaining = 0;
                UART1_flushTxFifo();
              }
              
              void UART1_abortRx(void)
              {
                rxRemaining = 0;
                UART1_flushRxFifo();
              }
              
              uint8_t UART1_txBytesRemaining(void)
              {
                return txRemaining;
              }
              
              uint8_t UART1_rxBytesRemaining(void)
              {
                return rxRemaining;
              }
              
              #endif 
 535          
 536          #if EFM8PDL_UART1_USE_STDIO == 1
 537          char putchar(char c){
 538   1        DECL_PAGE;
 539   1        SET_PAGE(UART1_SFR_PAGE);
 540   1        while(!SCON1_TI);
 541   1        SBUF1 = c;
 542   1        SCON1_TI = 0;
 543   1        RESTORE_PAGE;
 544   1        return c;
 545   1      }
 546          
 547          char _getkey(void){
 548   1        char val;
 549   1        DECL_PAGE;
 550   1        SET_PAGE(UART1_SFR_PAGE);
 551   1        while(!SCON1_RI);
 552   1        SCON1_RI = 0;
 553   1      
C51 COMPILER V9.53.0.0   UART_1                                                            01/24/2018 14:27:38 PAGE 10  

 554   1        val = SBUF1;
 555   1        RESTORE_PAGE;
 556   1        return val;
 557   1      }
 558          
 559          void UART1_initStdio(uint32_t sysclk, uint32_t baudrate)
 560          {
 561   1        DECL_PAGE;
 562   1        SET_PAGE(UART1_SFR_PAGE);
 563   1        SCON1  |= SCON1_REN__RECEIVE_ENABLED | SCON1_TI__SET;
 564   1        UART1PCF = UART1PCF_RXSEL__CROSSBAR;              
 565   1        SMOD1  |= SMOD1_SDL__8_BITS;
 566   1        UART1_initBaudRate(sysclk, baudrate);
 567   1        RESTORE_PAGE;
 568   1      }
 569          
 570          #endif //EFM8PDL_UART0_USE_STDIO


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    973    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     16      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       7
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
