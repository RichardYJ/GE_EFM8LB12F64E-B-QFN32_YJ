C51 COMPILER V9.53.0.0   EFM8LB1_FLASHPRIMITIVES                                           01/18/2018 15:40:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8LB1_FLASHPRIMITIVES
OBJECT MODULE PLACED IN .\src\EFM8LB1_FlashPrimitives.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\WorkSpace\MyC
                    -ode\GE_EFM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\src\EFM8LB1_FlashPrimitives.c OMF2 LARGE DEBUG OBJECTEXTEND RO
                    -M(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\WorkSpac
                    -e\MyCode\GE_EFM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/805
                    -1/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc) PR
                    -INT(.\src\EFM8LB1_FlashPrimitives.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8LB1_FlashPrimitives.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8LB1_FlashPrimitives.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2015 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program contains several useful utilities for writing and updating
  10          // flash memory.
  11          //
  12          // Target:         EFM8LB1
  13          // Tool chain:     Keil C51
  14          //
  15          // Release 1.0
  16          //    -Initial Revision (ST)
  17          //    -19 AUG 2015
  18          //
  19          
  20          //-----------------------------------------------------------------------------
  21          // Includes
  22          //-----------------------------------------------------------------------------
  23          #include <SI_EFM8LB1_Register_Enums.h>
  24          #include "EFM8LB1_FlashPrimitives.h"
  25          
  26          //-----------------------------------------------------------------------------
  27          // FLASH_ByteWrite
  28          //-----------------------------------------------------------------------------
  29          //
  30          // Return Value : None
  31          // Parameters   :
  32          //   1) FLADDR addr - address of the byte to write to
  33          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  34          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  35          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  36          //   2) uint8_t - byte to write to flash.
  37          //
  38          // This routine writes <byte> to the linear flash address <addr>.
  39          //
  40          //-----------------------------------------------------------------------------
  41          void FLASH_ByteWrite (FLADDR addr, uint8_t byte)
  42          {
  43   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
  44   1         uint8_t SAVE_SFRPAGE;
  45   1         SI_VARIABLE_SEGMENT_POINTER(pwrite, uint8_t, SI_SEG_XDATA); // Flash write pointer
  46   1      
  47   1         SAVE_SFRPAGE = SFRPAGE;
  48   1         SFRPAGE = 0;
  49   1         IE_EA = 0;                          // Disable interrupts
  50   1      
  51   1         VDM0CN = 0x80;                      // Enable VDD monitor
C51 COMPILER V9.53.0.0   EFM8LB1_FLASHPRIMITIVES                                           01/18/2018 15:40:38 PAGE 2   

  52   1      
  53   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
  54   1      
  55   1         pwrite = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_XDATA)) addr;
  56   1      
  57   1         FLKEY  = 0xA5;                      // Key Sequence 1
  58   1         FLKEY  = 0xF1;                      // Key Sequence 2
  59   1         PSCTL |= 0x01;                      // PSWE = 1 which enables writes
  60   1      
  61   1         VDM0CN = 0x80;                      // Enable VDD monitor
  62   1      
  63   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
  64   1         *pwrite = byte;                     // Write the byte
  65   1      
  66   1         PSCTL &= ~0x01;                     // PSWE = 0 which disable writes
  67   1      
  68   1         SFRPAGE = SAVE_SFRPAGE;
  69   1         IE_EA = EA_SAVE;                    // Restore interrupts
  70   1      }
  71          
  72          //-----------------------------------------------------------------------------
  73          // FLASH_ByteRead
  74          //-----------------------------------------------------------------------------
  75          //
  76          // Return Value :
  77          //      uint8_t - byte read from flash
  78          // Parameters   :
  79          //   1) FLADDR addr - address of the byte to read to
  80          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  81          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  82          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  83          //
  84          // This routine reads a <byte> from the linear flash address <addr>.
  85          //
  86          //-----------------------------------------------------------------------------
  87          uint8_t FLASH_ByteRead (FLADDR addr)
  88          {
  89   1              uint8_t SAVE_SFRPAGE;
  90   1      
  91   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
  92   1         SI_VARIABLE_SEGMENT_POINTER(pread, uint8_t, const SI_SEG_CODE); // Flash read pointer
  93   1         uint8_t byte;
  94   1         SAVE_SFRPAGE = SFRPAGE;
  95   1         SFRPAGE = 0;
  96   1      
  97   1         IE_EA = 0;                          // Disable interrupts
  98   1      
  99   1         pread = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, const SI_SEG_CODE)) addr;
 100   1      
 101   1         byte = *pread;                      // Read the byte
 102   1      
 103   1         SFRPAGE = SAVE_SFRPAGE;
 104   1         IE_EA = EA_SAVE;                    // Restore interrupts
 105   1      
 106   1         return byte;
 107   1      }
 108          
 109          //-----------------------------------------------------------------------------
 110          // FLASH_PageErase
 111          //-----------------------------------------------------------------------------
 112          //
 113          // Return Value : None
 114          // Parameters   :
C51 COMPILER V9.53.0.0   EFM8LB1_FLASHPRIMITIVES                                           01/18/2018 15:40:38 PAGE 3   

 115          //   1) FLADDR addr - address of any byte in the page to erase
 116          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
 117          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
 118          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
 119          //
 120          // This routine erases the flash page containing the linear flash address
 121          // <addr>.  Note that the page of flash page containing the Lock Byte cannot be
 122          // erased if the Lock Byte is set.
 123          //
 124          //-----------------------------------------------------------------------------
 125          void FLASH_PageErase (FLADDR addr)
 126          {
 127   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
 128   1         uint8_t SAVE_SFRPAGE;
 129   1         SI_VARIABLE_SEGMENT_POINTER(pwrite, uint8_t, SI_SEG_XDATA); // Flash write pointer
 130   1      
 131   1         SAVE_SFRPAGE = SFRPAGE;
 132   1         SFRPAGE = 0;
 133   1         IE_EA = 0;                          // Disable interrupts
 134   1      
 135   1         VDM0CN = 0x80;                      // Enable VDD monitor
 136   1      
 137   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 138   1      
 139   1         pwrite = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_XDATA)) addr;
 140   1      
 141   1         FLKEY  = 0xA5;                      // Key Sequence 1
 142   1         FLKEY  = 0xF1;                      // Key Sequence 2
 143   1         PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
 144   1      
 145   1         VDM0CN = 0x80;                      // Enable VDD monitor
 146   1      
 147   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 148   1         *pwrite = 0;                        // Initiate page erase
 149   1      
 150   1         PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
 151   1      
 152   1         SFRPAGE = SAVE_SFRPAGE;
 153   1         IE_EA = EA_SAVE;                    // Restore interrupts
 154   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    125    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
