C51 COMPILER V9.53.0.0   EFM8LB1_FLASHPRIMITIVES                                           01/24/2018 13:59:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8LB1_FLASHPRIMITIVES
OBJECT MODULE PLACED IN .\src\EFM8LB1_FlashPrimitives.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\WorkSpace\MyC
                    -ode\GE_EFM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\src\EFM8LB1_FlashPrimitives.c OMF2 LARGE DEBUG OBJECTEXTEND RO
                    -M(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\WorkSpac
                    -e\MyCode\GE_EFM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/805
                    -1/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc) PR
                    -INT(.\src\EFM8LB1_FlashPrimitives.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8LB1_FlashPrimitives.OBJ)

line level    source

   1          
   2          
   3          //-----------------------------------------------------------------------------
   4          // Includes
   5          //-----------------------------------------------------------------------------
   6          #include <SI_EFM8LB1_Register_Enums.h>
   7          #include "EFM8LB1_FlashPrimitives.h"
   8          
   9          void FLASH_ByteWrite (FLADDR addr, uint8_t byte)
  10          {
  11   1         bool EA_SAVE = IE_EA;                
  12   1         uint8_t SAVE_SFRPAGE;
  13   1         SI_VARIABLE_SEGMENT_POINTER(pwrite, uint8_t, SI_SEG_XDATA); 
  14   1      
  15   1         SAVE_SFRPAGE = SFRPAGE;
  16   1         SFRPAGE = 0;
  17   1         IE_EA = 0;                         
  18   1      
  19   1         VDM0CN = 0x80;                     
  20   1      
  21   1         RSTSRC = 0x02;                     
  22   1      
  23   1         pwrite = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_XDATA)) addr;
  24   1      
  25   1         FLKEY  = 0xA5;                     
  26   1         FLKEY  = 0xF1;                     
  27   1         PSCTL |= 0x01;                     
  28   1      
  29   1         VDM0CN = 0x80;                     
  30   1      
  31   1         RSTSRC = 0x02;                     
  32   1         *pwrite = byte;                    
  33   1      
  34   1         PSCTL &= ~0x01;                    
  35   1      
  36   1         SFRPAGE = SAVE_SFRPAGE;
  37   1         IE_EA = EA_SAVE;                   
  38   1      }
  39          
  40          //-----------------------------------------------------------------------------
  41          // FLASH_ByteRead
  42          //-----------------------------------------------------------------------------
  43          //
  44          // Return Value :
  45          //      uint8_t - byte read from flash
  46          // Parameters   :
  47          //   1) FLADDR addr - address of the byte to read to
  48          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  49          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  50          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  51          //
C51 COMPILER V9.53.0.0   EFM8LB1_FLASHPRIMITIVES                                           01/24/2018 13:59:38 PAGE 2   

  52          // This routine reads a <byte> from the linear flash address <addr>.
  53          //
  54          //-----------------------------------------------------------------------------
  55          uint8_t FLASH_ByteRead (FLADDR addr)
  56          {
  57   1              uint8_t SAVE_SFRPAGE;
  58   1      
  59   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
  60   1         SI_VARIABLE_SEGMENT_POINTER(pread, uint8_t, const SI_SEG_CODE); // Flash read pointer
  61   1         uint8_t byte;
  62   1         SAVE_SFRPAGE = SFRPAGE;
  63   1         SFRPAGE = 0;
  64   1      
  65   1         IE_EA = 0;                          // Disable interrupts
  66   1      
  67   1         pread = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, const SI_SEG_CODE)) addr;
  68   1      
  69   1         byte = *pread;                      // Read the byte
  70   1      
  71   1         SFRPAGE = SAVE_SFRPAGE;
  72   1         IE_EA = EA_SAVE;                    // Restore interrupts
  73   1      
  74   1         return byte;
  75   1      }
  76          
  77          //-----------------------------------------------------------------------------
  78          // FLASH_PageErase
  79          //-----------------------------------------------------------------------------
  80          //
  81          // Return Value : None
  82          // Parameters   :
  83          //   1) FLADDR addr - address of any byte in the page to erase
  84          //                    valid range is from 0x0000 to 0x1FFF for 8 kB devices
  85          //                    valid range is from 0x0000 to 0x0FFF for 4 kB devices
  86          //                    valid range is from 0x0000 to 0x07FF for 2 kB devices
  87          //
  88          // This routine erases the flash page containing the linear flash address
  89          // <addr>.  Note that the page of flash page containing the Lock Byte cannot be
  90          // erased if the Lock Byte is set.
  91          //
  92          //-----------------------------------------------------------------------------
  93          void FLASH_PageErase (FLADDR addr)
  94          {
  95   1         bool EA_SAVE = IE_EA;                // Preserve IE_EA
  96   1         uint8_t SAVE_SFRPAGE;
  97   1         SI_VARIABLE_SEGMENT_POINTER(pwrite, uint8_t, SI_SEG_XDATA); // Flash write pointer
  98   1      
  99   1         SAVE_SFRPAGE = SFRPAGE;
 100   1         SFRPAGE = 0;
 101   1         IE_EA = 0;                          // Disable interrupts
 102   1      
 103   1         VDM0CN = 0x80;                      // Enable VDD monitor
 104   1      
 105   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 106   1      
 107   1         pwrite = (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_XDATA)) addr;
 108   1      
 109   1         FLKEY  = 0xA5;                      // Key Sequence 1
 110   1         FLKEY  = 0xF1;                      // Key Sequence 2
 111   1         PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
 112   1      
 113   1         VDM0CN = 0x80;                      // Enable VDD monitor
 114   1      
C51 COMPILER V9.53.0.0   EFM8LB1_FLASHPRIMITIVES                                           01/24/2018 13:59:38 PAGE 3   

 115   1         RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 116   1         *pwrite = 0;                        // Initiate page erase
 117   1      
 118   1         PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
 119   1      
 120   1         SFRPAGE = SAVE_SFRPAGE;
 121   1         IE_EA = EA_SAVE;                    // Restore interrupts
 122   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    125    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
