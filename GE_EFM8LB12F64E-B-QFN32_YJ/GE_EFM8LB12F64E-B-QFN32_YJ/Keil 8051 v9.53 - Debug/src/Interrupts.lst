C51 COMPILER V9.53.0.0   INTERRUPTS                                                        01/24/2018 14:15:47 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\WorkSpace\MyC
                    -ode\GE_EFM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\src\Interrupts.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARN
                    -INGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\WorkSpace\MyCode\GE_E
                    -FM8LB12F64E-B-QFN32_YJ\GE_EFM8LB12F64E-B-QFN32_YJ\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Dev
                    -ice/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc) PRINT(.\src\Int
                    -errupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          
   2          
   3          #include <SI_EFM8LB1_Register_Enums.h>
   4          #include "EFM8LB1_SMBus_MasterMultibyte.h"
   5          #include "EFM8LB1_I2C_Slave.h"
   6          typedef enum {
   7                  SLAVE_NORMAL_DATA, SLAVE_DATA_ADDRESS,
   8          } SLAVE_WRITE_DATA_TYPE;
   9          
  10          extern volatile uint8_t nWR;
  11          extern uint32_t ADC_AVG;               
  12          extern bool CONV_COMPLETE;             
  13          uint8_t iArry = 0;
  14          bool bTx_4th_byte_nack = false;
  15          
  16          
  17          volatile uint8_t I2C1_slaveWriteData = 0x16;
  18          
  19          
  20          uint8_t EEPROM_Buffer[] =
  21                          {
  22                                          17,             //B0
  23                                          5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  24                                          0, 0, 0, 0, 0, 0, 0, 0,
  25          
  26                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  27                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  28                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  29                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0,
  30                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  31                                          0,              //B127
  32          
  33                                          17, 0, 35,
  34                                          128,            //136
  35                                          0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 70, 73, 84,
  36                                          32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 9, 58, 49, 48,
  37                                          48, 50, 57, 55, 49, 49, 48, 49, 32, 32, 32, 32, 32, 32, 49, 32,
  38                                          66, 104, 7, 208, 0, 99,
  39                                          2,              //CR4=11 SR4=2 AOC=1?¨°24
  40                                          0, 0, 0, 53, 50, 56, 54, 50, 48, 55, 53, 48, 32, 32, 32, 32, 32,
  41                                          32, 32, 49, 53, 49, 48, 49, 51, 32, 32, 0, 0, 0, 41,
  42          
  43                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  44                                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  45          
  46                          };
  47          SI_INTERRUPT (I2C0_ISR, I2C0_IRQn)
  48          {
  49   1              static uint16_t eepromAddress = 0;  
  50   1              static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  51   1              static uint8_t WriteStat = 0;
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        01/24/2018 14:15:47 PAGE 2   

  52   1              uint8_t t,j;
  53   1      
  54   1              uint8_t SAVE_SFRPAGE;
  55   1              bool EA_SAVE = IE_EA;                   
  56   1              IE_EA = 0;                                              
  57   1              SAVE_SFRPAGE = SFRPAGE;
  58   1              SFRPAGE = 0x20;
  59   1      
  60   1              switch (I2C0STAT & I2C_STATUS_VECTOR_MASK) {
  61   2      
  62   2                      case I2C_ADDR_RD:
  63   2                      I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_RD__BMASK);
  64   2                      t = EEPROM_Buffer[eepromAddress++];
  65   2                      if(0x0==t)
  66   2                      {
  67   3                              j=t;
  68   3                      }
  69   2                      I2C0DOUT = t;//EEPROM_Buffer[eepromAddress++];
  70   2                      if(sizeof(EEPROM_Buffer) <= eepromAddress)
  71   2                      {
  72   3                              eepromAddress = 0;
  73   3                      }
  74   2                      WriteStat = 0;
  75   2                      break;
  76   2      
  77   2                      case I2C_ADDR_WR:
  78   2                      I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_WR__BMASK);
  79   2                      slaveWriteType = SLAVE_DATA_ADDRESS;
  80   2                      WriteStat = 1;
  81   2                      break;
  82   2      
  83   2                      case I2C_RD_DATA:
  84   2                      if ((I2C0STAT & I2C0STAT_NACK__BMASK) == I2C0STAT_NACK__SET) {
  85   3                              I2C0STAT &= ~I2C0STAT_NACK__BMASK;
  86   3                      } else {
  87   3                              t = EEPROM_Buffer[eepromAddress++];
  88   3                              if(0x11==t)
  89   3                              {
  90   4                                      j=t;
  91   4                              }
  92   3                              I2C0DOUT = t;
  93   3      
  94   3                              if(sizeof(EEPROM_Buffer) <= eepromAddress)
  95   3                              {
  96   4                                      eepromAddress = 0;
  97   4                              }
  98   3                      }
  99   2                      I2C0STAT &= ~I2C0STAT_RD__BMASK;
 100   2                      break;
 101   2      
 102   2                      case I2C_WR_DATA:
 103   2                      I2C0STAT &= ~I2C0STAT_WR__BMASK;
 104   2      
 105   2                      break;
 106   2      
 107   2                      case I2C_STOSTA:
 108   2                      case I2C_STOSTARD:
 109   2                      I2C0STAT &= ~I2C0STAT_STOP__BMASK;
 110   2      #if 0
                              I2C0CN0 &= ~I2C0CN0_BUSY__BMASK;                // Clear BUSY bit
                              I2C0CN0 |= I2C0FCN0_RFLSH__FLUSH | I2C0FCN0_TFLSH__FLUSH;
              #endif
 114   2                      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        01/24/2018 14:15:47 PAGE 3   

 115   2      //              WriteStat = 0;//added 20180122
 116   2                      return;
 117   2                      break;
 118   2      
 119   2                      case I2C_STO:
 120   2                      I2C0STAT &= ~I2C0STAT_STOP__BMASK;
 121   2      #if 0
                              I2C0CN0 &= ~I2C0CN0_BUSY__BMASK;                // Clear BUSY bit
                              I2C0CN0 |= I2C0FCN0_RFLSH__FLUSH | I2C0FCN0_TFLSH__FLUSH;
              #endif
 125   2                      
 126   2      //              WriteStat = 0;//added 20180122
 127   2                      break;
 128   2                      default:
 129   2                      break;
 130   2              }
 131   1      
 132   1              while((I2C0FCN1 & I2C0FCN1_RXE__BMASK) == I2C0FCN1_RXE__NOT_EMPTY) {
 133   2                      I2C1_slaveWriteData = I2C0DIN;
 134   2                      if(1==WriteStat&&80!=I2C1_slaveWriteData)
 135   2                      {
 136   3                              switch(slaveWriteType)
 137   3                              {
 138   4                                      case SLAVE_DATA_ADDRESS:
 139   4                                      if(I2C1_slaveWriteData>=128)
 140   4                                      {
 141   5                                              eepromAddress = I2C1_slaveWriteData+128*EEPROM_Buffer[127];
 142   5                                      }
 143   4                                      else
 144   4                                      {
 145   5                                              eepromAddress = I2C1_slaveWriteData;
 146   5                                      }
 147   4                                      break;
 148   4      
 149   4                                      case SLAVE_NORMAL_DATA:
 150   4                                      default:
 151   4                                      EEPROM_Buffer[eepromAddress++] = I2C1_slaveWriteData;
 152   4      
 153   4                                      if(sizeof(EEPROM_Buffer) <= eepromAddress)
 154   4                                      {
 155   5                                              eepromAddress = 0;
 156   5                                      }
 157   4                                      break;
 158   4                              }
 159   3      
 160   3                              slaveWriteType = SLAVE_NORMAL_DATA;
 161   3      //                      WriteStat = 0;//added 20180122
 162   3                      }
 163   2              }
 164   1      
 165   1              I2C0STAT &= ~I2C0STAT_I2C0INT__BMASK;
 166   1              SFRPAGE = SAVE_SFRPAGE;
 167   1              IE_EA = EA_SAVE;                                        
 168   1      
 169   1      }
 170          
 171          
 172          SI_INTERRUPT (SMBUS0_ISR, SMBUS0_IRQn)
 173          {
 174   1              bool FAIL = 0;                       
 175   1              static uint8_t sent_byte_counter;
 176   1              static uint8_t rec_byte_counter;
 177   1      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        01/24/2018 14:15:47 PAGE 4   

 178   1              if (SMB0CN0_ARBLOST == 0)               
 179   1              {
 180   2      
 181   2                      switch (SMB0CN0 & 0xF0)
 182   2                      {
 183   3      
 184   3                              case SMB_MTSTA:
 185   3                              SMB0DAT = TARGET<<1;
 186   3                              SMB0DAT &= 0xFE;        
 187   3                              SMB0DAT |= (uint8_t) SMB_RW;
 188   3                              SMB0CN0_STA = 0;
 189   3                              rec_byte_counter = 1;
 190   3                              sent_byte_counter = 1;
 191   3                              break;
 192   3      
 193   3      
 194   3                              case SMB_MTDB:
 195   3                              if (SMB0CN0_ACK)
 196   3                              {
 197   4                                      if (SMB_RW == WRITE)  
 198   4                                      {
 199   5                                              if (sent_byte_counter <= nWR /*NUM_BYTES_WR*/)
 200   5                                              {
 201   6      
 202   6                                                      SMB0DAT = SMB_DATA_OUT[sent_byte_counter-1];
 203   6                                                      sent_byte_counter++;
 204   6                                              }
 205   5                                              else
 206   5                                              {
 207   6                                                      SMB0CN0_STO = 1; 
 208   6                                                      SMB_BUSY = 0;
 209   6                                              }
 210   5                                      }
 211   4                                      else {}               
 212   4                              }
 213   3                              else                      
 214   3                              {
 215   4                                      if(bTx_4th_byte_nack)
 216   4                                      {
 217   5                                              SMB0CN0_STO = 1; 
 218   5                                              SMB_BUSY = 0;
 219   5                                              break;
 220   5                                      }
 221   4                                      SMB0CN0_STO = 1;  
 222   4                                      SMB0CN0_STA = 1;
 223   4                                      NUM_ERRORS++;
 224   4                              }
 225   3                              break;
 226   3      
 227   3      
 228   3                              case SMB_MRDB:
 229   3                              if (rec_byte_counter < NUM_BYTES_RD)
 230   3                              {
 231   4                                      SMB_DATA_IN[rec_byte_counter-1] = SMB0DAT; 
 232   4                                                                                                                         
 233   4                                      SMB0CN0_ACK = 1;                                                   
 234   4                                      rec_byte_counter++;                                                
 235   4                              }
 236   3                              else
 237   3                              {
 238   4                                      SMB_DATA_IN[rec_byte_counter-1] = SMB0DAT;
 239   4                                                                                                                         
 240   4                                      SMB_BUSY = 0;                                                      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        01/24/2018 14:15:47 PAGE 5   

 241   4                                      SMB0CN0_ACK = 0;                                                   
 242   4      
 243   4                                      SMB0CN0_STO = 1;                                                   
 244   4                              }
 245   3                              break;
 246   3      
 247   3                              default:
 248   3                              FAIL = 1;                  
 249   3                              break;
 250   3      
 251   3                      } 
 252   2              }
 253   1              else
 254   1              {
 255   2      
 256   2                      FAIL = 1;
 257   2              } 
 258   1      
 259   1              if (FAIL)
 260   1              {
 261   2                      SMB0CF &= ~0x80;   
 262   2                      SMB0CF |= 0x80;
 263   2                      SMB0CN0_STA = 0;
 264   2                      SMB0CN0_STO = 0;
 265   2                      SMB0CN0_ACK = 0;
 266   2      
 267   2                      SMB_BUSY = 0;
 268   2      
 269   2                      FAIL = 0;
 270   2      
 271   2      
 272   2                      NUM_ERRORS++;
 273   2              }
 274   1      
 275   1              SMB0CN0_SI = 0;   
 276   1      }
 277          
 278          SI_INTERRUPT (TIMER3_ISR, TIMER3_IRQn)
 279          {
 280   1              SMB0CF &= ~0x80;  
 281   1              SMB0CF |= 0x80;
 282   1              TMR3CN0 &= ~0x80;
 283   1                                         
 284   1              SMB0CN0_STA = 0;
 285   1              SMB_BUSY = 0;  
 286   1      }
 287          
 288          SI_INTERRUPT (TIMER4_ISR, TIMER4_IRQn)
 289          {
 290   1              SFRPAGE = PG3_PAGE;
 291   1      
 292   1              I2C0CN0 &= ~I2C0CN0_I2C0EN__BMASK;                      
 293   1              I2C0CN0 |= I2C0CN0_I2C0EN__ENABLED;
 294   1      
 295   1              SFRPAGE = PG2_PAGE;
 296   1              TMR4CN0 &= ~TMR4CN0_TF4H__BMASK;
 297   1      
 298   1      }
 299          
 300          SI_INTERRUPT (ADC0EOC_ISR, ADC0EOC_IRQn)
 301          {
 302   1                 ADC0CN0_ADINT = 0;  
 303   1                 ADC_AVG = ADC0/4;
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        01/24/2018 14:15:47 PAGE 6   

 304   1                 CONV_COMPLETE = 1; 
 305   1      
 306   1      }
 307          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    757    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    264    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
