C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\WorkSpace\MyC
                    -ode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\src\Interrupts.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(
                    -2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) BROWSE INTPROMOTE INCDIR(D:\WorkSpace\MyCode\SILICO
                    -N_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/
                    -si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc) PRINT(.\src\Interrupts.lst
                    -) COND CODE PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8LB1_Register_Enums.h>
  11          #include "EFM8LB1_I2C_Slave.h"
  12          #include "EFM8LB1_SMBus_MasterMultibyte.h"
  13          
  14          typedef enum {
  15                  SLAVE_NORMAL_DATA, SLAVE_DATA_ADDRESS,
  16          } SLAVE_WRITE_DATA_TYPE;
  17          
  18          volatile uint8_t I2C1_slaveWriteData = 0x16;
  19          //const uint8_t cConst[10];
  20          #if 0
              uint8_t EEPROM_Buffer[3] = { 0, 1, 2 }; //[64] = { 0 };
              #else
  23          uint8_t EEPROM_Buffer[] =
  24          //uint8_t EEPROM_Buffer[] =
  25          {
  26                  17,             //B0
  27                  5,
  28                  6,
  29                  0,
  30                  0,
  31                  0,
  32                  0,
  33                  0,
  34                  0,
  35                  0,
  36                  0,
  37                  0,
  38                  0,
  39                  0,
  40                  0,
  41                  0,
  42                  0,
  43                  0,
  44                  0,
  45                  0,
  46                  0,
  47                  0,
  48                  0,
  49                  0,
  50                  0,
  51                  0,
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 2   

  52                  0,
  53                  0,
  54                  0,
  55                  0,
  56          
  57                  0,
  58                  0,
  59                  0,
  60                  0,
  61                  0,
  62                  0,
  63                  0,
  64                  0,
  65                  0,
  66                  0,
  67                  0,
  68                  0,
  69                  0,
  70                  0,
  71                  0,
  72                  0,
  73                  0,
  74                  0,
  75                  0,
  76                  0,
  77                  0,
  78                  0,
  79                  0,
  80                  0,
  81                  0,
  82                  0,
  83                  0,
  84                  0,
  85                  0,
  86                  0,
  87                  0,
  88                  0,
  89                  0,
  90                  0,
  91                  0,
  92                  0,
  93                  0,
  94                  0,
  95                  0,
  96                  0,
  97                  0,
  98                  0,
  99                  0,
 100                  0,
 101                  0,
 102                  0,
 103                  0,
 104                  0,
 105                  0,
 106                  0,
 107                  0,
 108                  0,
 109                  0,
 110                  0,
 111                  0,
 112                  0,
 113                  0,
 114                  0,
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 3   

 115                  0,
 116                  0,
 117                  0,
 118                  0,
 119                  0,
 120                  0,
 121                  0,
 122                  0,
 123                  0,
 124                  0,
 125                  0,
 126                  0,
 127                  0,
 128                  0,
 129                  0,
 130                  0,
 131                  0,
 132                  0,
 133                  0,
 134                  0,
 135                  0,
 136                  0,
 137                  56,
 138                  0,
 139                  0,
 140                  0,
 141                  0,
 142                  0,
 143                  0,
 144                  0,
 145                  0,
 146                  0,
 147                  0,
 148                  0,
 149                  0,
 150                  0,
 151                  0,
 152                  0,
 153                  0,
 154                  0,//B127
 155          
 156                  17,
 157                  0,
 158                  35,
 159                  128,//136
 160                  0,
 161                  112,
 162                  0,
 163                  0,
 164                  0,
 165                  0,
 166                  0,
 167                  0,
 168                  0,
 169                  0,
 170                  0,
 171                  0,
 172                  0,
 173                  0,
 174                  1,
 175                  8,
 176                  70,
 177                  73,
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 4   

 178                  84,
 179                  32,
 180                  0,
 181                  0,
 182                  0,
 183                  0,
 184                  0,
 185                  0,
 186                  0,
 187                  0,
 188                  0,
 189                  0,
 190                  0,
 191                  0,
 192                  31,
 193                  0,
 194                  9,
 195                  58,
 196                  49,
 197                  48,
 198                  48,
 199                  50,
 200                  57,
 201                  55,
 202                  49,
 203                  49,
 204                  48,
 205                  49,
 206                  32,
 207                  32,
 208                  32,
 209                  32,
 210                  32,
 211                  32,
 212                  49,
 213                  32,
 214                  66,
 215                  104,
 216                  7,
 217                  208,
 218                  0,
 219                  99,
 220                  2,//CR4=11 SR4=2 AOC=1»ò24
 221                  0,
 222                  0,
 223                  0,
 224                  53,
 225                  50,
 226                  56,
 227                  54,
 228                  50,
 229                  48,
 230                  55,
 231                  53,
 232                  48,
 233                  32,
 234                  32,
 235                  32,
 236                  32,
 237                  32,
 238                  32,
 239                  32,
 240                  49,
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 5   

 241                  53,
 242                  49,
 243                  48,
 244                  49,
 245                  51,
 246                  32,
 247                  32,
 248                  0,
 249                  0,
 250                  0,
 251                  41,
 252          
 253                  0,
 254                  0,
 255                  0,
 256                  0,
 257                  0,
 258                  0,
 259                  0,
 260                  0,
 261                  0,
 262                  0,
 263                  0,
 264                  0,
 265                  0,
 266                  0,
 267                  0,
 268                  0,
 269                  0,
 270                  0,
 271                  0,
 272                  0,
 273                  0,
 274                  0,
 275                  0,
 276                  0,
 277                  0,
 278                  0,
 279                  0,
 280                  0,
 281                  0,
 282                  0,
 283                  0,
 284                  0,
 285          
 286          };
 287          #endif
 288          
 289          //-----------------------------------------------------------------------------
 290          // I2C0_ISR
 291          //-----------------------------------------------------------------------------
 292          //
 293          // I2C0 ISR Content goes here. Remember to clear flag bits:
 294          // I2C0STAT::I2C0INT (I2C Interrupt)
 295          //
 296          //-----------------------------------------------------------------------------
 297          SI_INTERRUPT (I2C0_ISR, I2C0_IRQn)
 298          {
 299   1              static uint16_t eepromAddress = 0;  //for addressing larger than 256Byte
 300   1              static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
 301   1              static uint8_t WriteStat;
 302   1      
 303   1              switch (I2C0STAT & I2C_STATUS_VECTOR_MASK) {
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 6   

 304   2      
 305   2                      case I2C_ADDR_RD:
 306   2                      I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_RD__BMASK);
 307   2                      I2C0DOUT = EEPROM_Buffer[eepromAddress++];
 308   2                      if(sizeof(EEPROM_Buffer) <= eepromAddress)
 309   2                      {
 310   3                              eepromAddress = 0;
 311   3                      }
 312   2                      break;
 313   2      
 314   2                      case I2C_ADDR_WR:
 315   2                      I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_WR__BMASK);
 316   2                      slaveWriteType = SLAVE_DATA_ADDRESS;
 317   2                      WriteStat = 1;
 318   2                      break;
 319   2      
 320   2                      case I2C_RD_DATA:
 321   2                      if ((I2C0STAT & I2C0STAT_NACK__BMASK) == I2C0STAT_NACK__SET) {
 322   3                              I2C0STAT &= ~I2C0STAT_NACK__BMASK;
 323   3                      } else {
 324   3                              I2C0DOUT = EEPROM_Buffer[eepromAddress++];
 325   3                              if(sizeof(EEPROM_Buffer) <= eepromAddress)
 326   3                              {
 327   4                                      eepromAddress = 0;
 328   4                              }
 329   3                      }
 330   2                      I2C0STAT &= ~I2C0STAT_RD__BMASK;
 331   2                      break;
 332   2      
 333   2                      case I2C_WR_DATA:
 334   2                      I2C0STAT &= ~I2C0STAT_WR__BMASK;
 335   2      
 336   2                      break;
 337   2      
 338   2                      case I2C_STOSTA:
 339   2                      case I2C_STOSTARD:
 340   2                      I2C0STAT &= ~I2C0STAT_STOP__BMASK;
 341   2                      return;
 342   2                      break;
 343   2      
 344   2                      case I2C_STO:
 345   2                      I2C0STAT &= ~I2C0STAT_STOP__BMASK;
 346   2                      break;
 347   2                      default:
 348   2                      break;
 349   2              }
 350   1      
 351   1              while((I2C0FCN1 & I2C0FCN1_RXE__BMASK) == I2C0FCN1_RXE__NOT_EMPTY) {
 352   2                      I2C1_slaveWriteData = I2C0DIN;
 353   2                      if(1==WriteStat&&80!=I2C1_slaveWriteData)
 354   2                      {
 355   3                              switch(slaveWriteType)
 356   3                              {
 357   4                                      case SLAVE_DATA_ADDRESS:
 358   4                                      if(I2C1_slaveWriteData>=128)
 359   4                                      {
 360   5                                              eepromAddress = I2C1_slaveWriteData+128*EEPROM_Buffer[127];
 361   5                                      }
 362   4                                      else
 363   4                                      {
 364   5                                              eepromAddress = I2C1_slaveWriteData;
 365   5                                      }
 366   4                                      break;
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 7   

 367   4      
 368   4                                      case SLAVE_NORMAL_DATA:
 369   4                                      default:
 370   4                                      EEPROM_Buffer[eepromAddress++] = I2C1_slaveWriteData;
 371   4      
 372   4                                      if(sizeof(EEPROM_Buffer) <= eepromAddress)
 373   4                                      {
 374   5                                              eepromAddress = 0;
 375   5                                      }
 376   4                                      break;
 377   4                              }
 378   3      
 379   3                              slaveWriteType = SLAVE_NORMAL_DATA;
 380   3                      }
 381   2              }
 382   1      
 383   1              I2C0STAT &= ~I2C0STAT_I2C0INT__BMASK;
 384   1      
 385   1      }
 386          
 387          //-----------------------------------------------------------------------------
 388          // TIMER4_ISR
 389          //-----------------------------------------------------------------------------
 390          //
 391          // TIMER4 ISR Content goes here. Remember to clear flag bits:
 392          // TMR4CN0::TF4H (Timer # High Byte Overflow Flag)
 393          // TMR4CN0::TF4L (Timer # Low Byte Overflow Flag)
 394          //
 395          //-----------------------------------------------------------------------------
 396          SI_INTERRUPT (TIMER4_ISR, TIMER4_IRQn)
 397          {
 398   1              SFRPAGE = PG3_PAGE;
 399   1      
 400   1              I2C0CN0 &= ~I2C0CN0_I2C0EN__BMASK;                      // Disable I2C module
 401   1              I2C0CN0 |= I2C0CN0_I2C0EN__ENABLED;// Re-enable I2C module
 402   1      
 403   1              SFRPAGE = PG2_PAGE;
 404   1              TMR4CN0 &= ~TMR4CN0_TF4H__BMASK;// Clear Timer3 interrupt-pending flag
 405   1      }
 406          
 407          //-----------------------------------------------------------------------------
 408          // SMBUS0_ISR
 409          //-----------------------------------------------------------------------------
 410          //
 411          // SMBUS0 ISR Content goes here. Remember to clear flag bits:
 412          // SMB0CN0::SI (SMBus Interrupt Flag)
 413          //
 414          //-----------------------------------------------------------------------------
 415          SI_INTERRUPT (SMBUS0_ISR, SMBUS0_IRQn)
 416          {
 417   1              bool FAIL = 0;                                          // Used by the ISR to flag failed
 418   1                                                                                      // transfers
 419   1      
 420   1              static uint8_t sent_byte_counter;
 421   1              static uint8_t rec_byte_counter;
 422   1      
 423   1              if (SMB0CN0_ARBLOST == 0)// Check for errors
 424   1              {
 425   2                      // Normal operation
 426   2                      switch (SMB0CN0 & 0xF0)// Status vector
 427   2                      {
 428   3                              // Master Transmitter/Receiver: START condition transmitted.
 429   3                              case SMB_MTSTA:
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 8   

 430   3                              SMB0DAT = TARGET<<1;// Load address of the target slave
 431   3                              SMB0DAT &= 0xFE;// Clear the LSB of the address for the
 432   3                                                              // R/W bit
 433   3                              SMB0DAT |= (uint8_t) SMB_RW;// Load R/W bit
 434   3                              SMB0CN0_STA = 0;// Manually clear START bit
 435   3                              rec_byte_counter = 1;// Reset the counter
 436   3                              sent_byte_counter = 1;// Reset the counter
 437   3                              break;
 438   3      
 439   3                              // Master Transmitter: Data byte transmitted
 440   3                              case SMB_MTDB:
 441   3                              if (SMB0CN0_ACK)// Slave SMB0CN0_ACK?
 442   3                              {
 443   4                                      if (SMB_RW == WRITE)    // If this transfer is a WRITE,
 444   4                                      {
 445   5                                        if (sent_byte_counter <= nWR /*NUM_BYTES_WR*/)
 446   5                                              {
 447   6                                                      // send data byte
 448   6                                                      SMB0DAT = SMB_DATA_OUT[sent_byte_counter-1];
 449   6                                                      sent_byte_counter++;
 450   6                                              }
 451   5                                              else
 452   5                                              {
 453   6                                                      SMB0CN0_STO = 1; // Set SMB0CN0_STO to terminate transfer
 454   6                                                      SMB_BUSY = 0;// And free SMBus interface
 455   6                                              }
 456   5                                      }
 457   4                                      else {}                            // If this transfer is a READ,
 458   4                                                                                 // proceed with transfer without
 459   4                                                                                 // writing to SMB0DAT (switch
 460   4                                                                                 // to receive mode)
 461   4      
 462   4                              }
 463   3                              else                                       // If slave NACK,
 464   3                              {
 465   4                                      SMB0CN0_STO = 1;           // Send STOP condition, followed
 466   4                                      SMB0CN0_STA = 1;// By a START
 467   4                                      NUM_ERRORS++;// Indicate error
 468   4                              }
 469   3                              break;
 470   3      
 471   3                              // Master Receiver: byte received
 472   3                              case SMB_MRDB:
 473   3                              if (rec_byte_counter < NUM_BYTES_RD)
 474   3                              {
 475   4                                      SMB_DATA_IN[rec_byte_counter-1] = SMB0DAT; // Store received
 476   4                                                                                                                         // byte
 477   4                                      SMB0CN0_ACK = 1;// Send SMB0CN0_ACK to indicate byte received
 478   4                                      rec_byte_counter++;// Increment the byte counter
 479   4                              }
 480   3                              else
 481   3                              {
 482   4                                      SMB_DATA_IN[rec_byte_counter-1] = SMB0DAT; // Store received
 483   4                                                                                                                         // byte
 484   4                                      SMB_BUSY = 0;// Free SMBus interface
 485   4                                      SMB0CN0_ACK = 0;// Send NACK to indicate last byte
 486   4                                                                      // of this transfer
 487   4      
 488   4                                      SMB0CN0_STO = 1;// Send STOP to terminate transfer
 489   4                              }
 490   3                              break;
 491   3      
 492   3                              default:
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 9   

 493   3                              FAIL = 1;                                  // Indicate failed transfer
 494   3                                                                                 // and handle at end of ISR
 495   3                              break;
 496   3      
 497   3                      } // end switch
 498   2              }
 499   1              else
 500   1              {
 501   2                      // SMB0CN0_ARBLOST = 1, error occurred... abort transmission
 502   2                      FAIL = 1;
 503   2              } // end SMB0CN0_ARBLOST if
 504   1      
 505   1              if (FAIL)// If the transfer failed,
 506   1              {
 507   2                      SMB0CF &= ~0x80;                                   // Reset communication
 508   2                      SMB0CF |= 0x80;
 509   2                      SMB0CN0_STA = 0;
 510   2                      SMB0CN0_STO = 0;
 511   2                      SMB0CN0_ACK = 0;
 512   2      
 513   2                      SMB_BUSY = 0;// Free SMBus
 514   2      
 515   2                      FAIL = 0;
 516   2                      LED1 = 0;
 517   2      
 518   2                      NUM_ERRORS++;// Indicate an error occurred
 519   2              }
 520   1      
 521   1              SMB0CN0_SI = 0;                                    // Clear interrupt flag
 522   1      }
 523          
 524          //-----------------------------------------------------------------------------
 525          // TIMER3_ISR
 526          //-----------------------------------------------------------------------------
 527          //
 528          // TIMER3 ISR Content goes here. Remember to clear flag bits:
 529          // TMR3CN0::TF3H (Timer # High Byte Overflow Flag)
 530          // TMR3CN0::TF3L (Timer # Low Byte Overflow Flag)
 531          //
 532          //-----------------------------------------------------------------------------
 533          SI_INTERRUPT (TIMER3_ISR, TIMER3_IRQn)
 534          {
 535   1              SMB0CF &= ~0x80;                                   // Disable SMBus
 536   1              SMB0CF |= 0x80;// Re-enable SMBus
 537   1              TMR3CN0 &= ~0x80;// Clear Timer3 interrupt-pending
 538   1                                               // flag
 539   1              SMB0CN0_STA = 0;
 540   1              SMB_BUSY = 0;// Free SMBus
 541   1      }
 542          
 543          //-----------------------------------------------------------------------------
 544          // UART0_ISR
 545          //-----------------------------------------------------------------------------
 546          //
 547          // UART0 ISR Content goes here. Remember to clear flag bits:
 548          // SCON0::RI (Receive Interrupt Flag)
 549          // SCON0::TI (Transmit Interrupt Flag)
 550          //
 551          //-----------------------------------------------------------------------------
 552          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 553          {
 554   1      
 555   1      }
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 10  

 556          
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION I2C0_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C004              PUSH    AR4
0011 C006              PUSH    AR6
0013 C007              PUSH    AR7
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 303
0015 E5B9              MOV     A,I2C0STAT
0017 540F              ANL     A,#0FH
0019 14                DEC     A
001A 6051              JZ      ?C0005
001C 14                DEC     A
001D 7003              JNZ     $ + 5H
001F 020000      R     LJMP    ?C0009
0022 24FE              ADD     A,#0FEH
0024 7003              JNZ     $ + 5H
0026 020000      R     LJMP    ?C0013
0029 24FA              ADD     A,#0FAH
002B 6033              JZ      ?C0004
002D 24FE              ADD     A,#0FEH
002F 6076              JZ      ?C0011
0031 14                DEC     A
0032 6073              JZ      ?C0011
0034 2404              ADD     A,#04H
0036 7078              JNZ     ?C0015
                                           ; SOURCE LINE # 305
0038         ?C0002:
                                           ; SOURCE LINE # 306
0038 53B9F6            ANL     I2C0STAT,#0F6H
                                           ; SOURCE LINE # 307
003B 900000      R     MOV     DPTR,#eepromAddress
003E E4                CLR     A
003F 75F001            MOV     B,#01H
0042 120000      E     LCALL   ?C?ILDIX
0045 FE                MOV     R6,A
0046 7400        R     MOV     A,#LOW EEPROM_Buffer
0048 25F0              ADD     A,B
004A F582              MOV     DPL,A
004C 7400        R     MOV     A,#HIGH EEPROM_Buffer
004E 3E                ADDC    A,R6
004F F583              MOV     DPH,A
0051 E0                MOVX    A,@DPTR
0052 F5BB              MOV     I2C0DOUT,A
                                           ; SOURCE LINE # 308
0054 C3                CLR     C
0055 900000      R     MOV     DPTR,#eepromAddress
0058 E0                MOVX    A,@DPTR
0059 9401              SUBB    A,#01H
005B 4053              JC      ?C0015
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
005D E4                CLR     A
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 12  

005E 8008              SJMP    ?C0047
                                           ; SOURCE LINE # 314
0060         ?C0004:
                                           ; SOURCE LINE # 315
0060 53B9F5            ANL     I2C0STAT,#0F5H
                                           ; SOURCE LINE # 316
0063 900000      R     MOV     DPTR,#slaveWriteType
0066 7401              MOV     A,#01H
0068         ?C0047:
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0069 A3                INC     DPTR
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
006B 8043              SJMP    ?C0015
                                           ; SOURCE LINE # 320
006D         ?C0005:
                                           ; SOURCE LINE # 321
006D E5B9              MOV     A,I2C0STAT
006F 30E405            JNB     ACC.4,?C0006
                                           ; SOURCE LINE # 322
0072 53B9EF            ANL     I2C0STAT,#0EFH
                                           ; SOURCE LINE # 323
0075 8026              SJMP    ?C0007
0077         ?C0006:
                                           ; SOURCE LINE # 324
0077 900000      R     MOV     DPTR,#eepromAddress
007A E4                CLR     A
007B 75F001            MOV     B,#01H
007E 120000      E     LCALL   ?C?ILDIX
0081 FE                MOV     R6,A
0082 7400        R     MOV     A,#LOW EEPROM_Buffer
0084 25F0              ADD     A,B
0086 F582              MOV     DPL,A
0088 7400        R     MOV     A,#HIGH EEPROM_Buffer
008A 3E                ADDC    A,R6
008B F583              MOV     DPH,A
008D E0                MOVX    A,@DPTR
008E F5BB              MOV     I2C0DOUT,A
                                           ; SOURCE LINE # 325
0090 C3                CLR     C
0091 900000      R     MOV     DPTR,#eepromAddress
0094 E0                MOVX    A,@DPTR
0095 9401              SUBB    A,#01H
0097 4004              JC      ?C0007
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
0099 E4                CLR     A
009A F0                MOVX    @DPTR,A
009B A3                INC     DPTR
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
009D         ?C0007:
                                           ; SOURCE LINE # 330
009D 53B9FE            ANL     I2C0STAT,#0FEH
                                           ; SOURCE LINE # 331
00A0 800E              SJMP    ?C0015
                                           ; SOURCE LINE # 333
00A2         ?C0009:
                                           ; SOURCE LINE # 334
00A2 53B9FD            ANL     I2C0STAT,#0FDH
                                           ; SOURCE LINE # 336
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 13  

00A5 8009              SJMP    ?C0015
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
00A7         ?C0011:
                                           ; SOURCE LINE # 340
00A7 53B9FB            ANL     I2C0STAT,#0FBH
00AA 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 344
00AD         ?C0013:
                                           ; SOURCE LINE # 345
00AD 53B9FB            ANL     I2C0STAT,#0FBH
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
00B0         ?C0015:
                                           ; SOURCE LINE # 351
00B0 E5AB              MOV     A,I2C0FCN1
00B2 30E203            JNB     ACC.2,$ + 6H
00B5 020000      R     LJMP    ?C0016
                                           ; SOURCE LINE # 352
00B8 900000      R     MOV     DPTR,#I2C1_slaveWriteData
00BB E5BC              MOV     A,I2C0DIN
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
00BE 900000      R     MOV     DPTR,#WriteStat
00C1 E0                MOVX    A,@DPTR
00C2 B401EB            CJNE    A,#01H,?C0015
00C5 900000      R     MOV     DPTR,#I2C1_slaveWriteData
00C8 E0                MOVX    A,@DPTR
00C9 6450              XRL     A,#050H
00CB 60E3              JZ      ?C0015
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
00CD 900000      R     MOV     DPTR,#slaveWriteType
00D0 E0                MOVX    A,@DPTR
00D1 14                DEC     A
00D2 7035              JNZ     ?C0023
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
00D4         ?C0019:
                                           ; SOURCE LINE # 358
00D4 900000      R     MOV     DPTR,#I2C1_slaveWriteData
00D7 E0                MOVX    A,@DPTR
00D8 C3                CLR     C
00D9 9480              SUBB    A,#080H
00DB 401D              JC      ?C0020
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
00DD 900000      R     MOV     DPTR,#EEPROM_Buffer+07FH
00E0 E0                MOVX    A,@DPTR
00E1 75F080            MOV     B,#080H
00E4 A4                MUL     AB
00E5 FF                MOV     R7,A
00E6 900000      R     MOV     DPTR,#I2C1_slaveWriteData
00E9 E0                MOVX    A,@DPTR
00EA 7C00              MOV     R4,#00H
00EC 2F                ADD     A,R7
00ED FE                MOV     R6,A
00EE EC                MOV     A,R4
00EF 35F0              ADDC    A,B
00F1 900000      R     MOV     DPTR,#eepromAddress
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 14  

00F4 F0                MOVX    @DPTR,A
00F5 A3                INC     DPTR
00F6 CE                XCH     A,R6
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
00F8 8039              SJMP    ?C0018
00FA         ?C0020:
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
00FA 900000      R     MOV     DPTR,#I2C1_slaveWriteData
00FD E0                MOVX    A,@DPTR
00FE FF                MOV     R7,A
00FF 900000      R     MOV     DPTR,#eepromAddress
0102 E4                CLR     A
0103 F0                MOVX    @DPTR,A
0104 A3                INC     DPTR
0105 EF                MOV     A,R7
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
0107 802A              SJMP    ?C0018
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0109         ?C0023:
                                           ; SOURCE LINE # 370
0109 900000      R     MOV     DPTR,#I2C1_slaveWriteData
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 900000      R     MOV     DPTR,#eepromAddress
0111 E4                CLR     A
0112 75F001            MOV     B,#01H
0115 120000      E     LCALL   ?C?ILDIX
0118 FC                MOV     R4,A
0119 7400        R     MOV     A,#LOW EEPROM_Buffer
011B 25F0              ADD     A,B
011D F582              MOV     DPL,A
011F 7400        R     MOV     A,#HIGH EEPROM_Buffer
0121 3C                ADDC    A,R4
0122 F583              MOV     DPH,A
0124 EF                MOV     A,R7
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0126 C3                CLR     C
0127 900000      R     MOV     DPTR,#eepromAddress
012A E0                MOVX    A,@DPTR
012B 9401              SUBB    A,#01H
012D 4004              JC      ?C0018
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
012F E4                CLR     A
0130 F0                MOVX    @DPTR,A
0131 A3                INC     DPTR
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
0133         ?C0018:
                                           ; SOURCE LINE # 379
0133 900000      R     MOV     DPTR,#slaveWriteType
0136 E4                CLR     A
0137 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 15  

0138 020000      R     LJMP    ?C0015
013B         ?C0016:
                                           ; SOURCE LINE # 383
013B 53B9DF            ANL     I2C0STAT,#0DFH
                                           ; SOURCE LINE # 385
013E         ?C0012:
013E D007              POP     AR7
0140 D006              POP     AR6
0142 D004              POP     AR4
0144 D000              POP     AR0
0146 D0D0              POP     PSW
0148 D082              POP     DPL
014A D083              POP     DPH
014C D0F0              POP     B
014E D0E0              POP     ACC
0150 32                RETI    
             ; FUNCTION I2C0_ISR (END)

             ; FUNCTION TIMER4_ISR (BEGIN)
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 398
0000 75A720            MOV     SFRPAGE,#020H
                                           ; SOURCE LINE # 400
0003 53BAFD            ANL     I2C0CN0,#0FDH
                                           ; SOURCE LINE # 401
0006 43BA02            ORL     I2C0CN0,#02H
                                           ; SOURCE LINE # 403
0009 75A710            MOV     SFRPAGE,#010H
                                           ; SOURCE LINE # 404
000C 53987F            ANL     TMR4CN0,#07FH
                                           ; SOURCE LINE # 405
000F 32                RETI    
             ; FUNCTION TIMER4_ISR (END)

             ; FUNCTION SMBUS0_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D000            MOV     PSW,#00H
000B C006              PUSH    AR6
000D C007              PUSH    AR7
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 417
000F C200        R     CLR     FAIL
                                           ; SOURCE LINE # 423
0011 30C203            JNB     SMB0CN0_ARBLOST,$ + 6H
0014 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 426
0017 E5C0              MOV     A,SMB0CN0
0019 54F0              ANL     A,#0F0H
001B 2480              ADD     A,#080H
001D 606A              JZ      ?C0036
001F 24C0              ADD     A,#0C0H
0021 6026              JZ      ?C0029
0023 24E0              ADD     A,#0E0H
0025 6003              JZ      $ + 5H
0027 020000      R     LJMP    ?C0039
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 429
002A         ?C0028:
                                           ; SOURCE LINE # 430
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 16  

002A 900000      E     MOV     DPTR,#TARGET
002D E0                MOVX    A,@DPTR
002E 25E0              ADD     A,ACC
0030 F5C2              MOV     SMB0DAT,A
                                           ; SOURCE LINE # 431
0032 53C2FE            ANL     SMB0DAT,#0FEH
                                           ; SOURCE LINE # 433
0035 A200        E     MOV     C,SMB_RW
0037 E4                CLR     A
0038 33                RLC     A
0039 42C2              ORL     SMB0DAT,A
                                           ; SOURCE LINE # 434
003B C2C5              CLR     SMB0CN0_STA
                                           ; SOURCE LINE # 435
003D 900000      R     MOV     DPTR,#rec_byte_counter
0040 7401              MOV     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
0043 900000      R     MOV     DPTR,#sent_byte_counter
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0047 807A              SJMP    ?C0040
                                           ; SOURCE LINE # 440
0049         ?C0029:
                                           ; SOURCE LINE # 441
0049 30C129            JNB     SMB0CN0_ACK,?C0030
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
004C 200074            JB      SMB_RW,?C0040
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
004F 900000      E     MOV     DPTR,#nWR
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 900000      R     MOV     DPTR,#sent_byte_counter
0057 E0                MOVX    A,@DPTR
0058 FE                MOV     R6,A
0059 D3                SETB    C
005A 9F                SUBB    A,R7
005B 5012              JNC     ?C0032
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 448
005D 7400        E     MOV     A,#LOW SMB_DATA_OUT+0FFFFH
005F 2E                ADD     A,R6
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH SMB_DATA_OUT+0FFFFH
0065 F583              MOV     DPH,A
0067 E0                MOVX    A,@DPTR
0068 F5C2              MOV     SMB0DAT,A
                                           ; SOURCE LINE # 449
006A 900000      R     MOV     DPTR,#sent_byte_counter
                                           ; SOURCE LINE # 450
006D 8036              SJMP    ?C0048
006F         ?C0032:
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
006F D2C4              SETB    SMB0CN0_STO
                                           ; SOURCE LINE # 454
0071 C200        E     CLR     SMB_BUSY
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
0073 804E              SJMP    ?C0040
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 17  

                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 462
0075         ?C0030:
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0075 D2C4              SETB    SMB0CN0_STO
                                           ; SOURCE LINE # 466
0077 D2C5              SETB    SMB0CN0_STA
                                           ; SOURCE LINE # 467
0079 900000      E     MOV     DPTR,#NUM_ERRORS+01H
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
007F 7042              JNZ     ?C0040
0081 900000      E     MOV     DPTR,#NUM_ERRORS
0084 E0                MOVX    A,@DPTR
0085 04                INC     A
0086 F0                MOVX    @DPTR,A
0087         ?C0045:
                                           ; SOURCE LINE # 468
                                           ; SOURCE LINE # 469
0087 803A              SJMP    ?C0040
                                           ; SOURCE LINE # 472
0089         ?C0036:
                                           ; SOURCE LINE # 473
0089 900000      R     MOV     DPTR,#rec_byte_counter
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E C3                CLR     C
008F 9402              SUBB    A,#02H
0091 7400        E     MOV     A,#LOW SMB_DATA_IN+0FFFFH
0093 5015              JNC     ?C0037
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
0095 2F                ADD     A,R7
0096 F582              MOV     DPL,A
0098 E4                CLR     A
0099 3400        E     ADDC    A,#HIGH SMB_DATA_IN+0FFFFH
009B F583              MOV     DPH,A
009D E5C2              MOV     A,SMB0DAT
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
00A0 D2C1              SETB    SMB0CN0_ACK
                                           ; SOURCE LINE # 478
00A2 900000      R     MOV     DPTR,#rec_byte_counter
00A5         ?C0048:
00A5 E0                MOVX    A,@DPTR
00A6 04                INC     A
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
00A8 8019              SJMP    ?C0040
00AA         ?C0037:
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
00AA 2F                ADD     A,R7
00AB F582              MOV     DPL,A
00AD E4                CLR     A
00AE 3400        E     ADDC    A,#HIGH SMB_DATA_IN+0FFFFH
00B0 F583              MOV     DPH,A
00B2 E5C2              MOV     A,SMB0DAT
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
00B5 C200        E     CLR     SMB_BUSY
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 18  

                                           ; SOURCE LINE # 485
00B7 C2C1              CLR     SMB0CN0_ACK
                                           ; SOURCE LINE # 488
00B9 D2C4              SETB    SMB0CN0_STO
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
00BB 8006              SJMP    ?C0040
                                           ; SOURCE LINE # 492
00BD         ?C0039:
                                           ; SOURCE LINE # 493
00BD D200        R     SETB    FAIL
                                           ; SOURCE LINE # 495
00BF 8002              SJMP    ?C0040
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
00C1         ?C0026:
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 502
00C1 D200        R     SETB    FAIL
                                           ; SOURCE LINE # 503
00C3         ?C0040:
                                           ; SOURCE LINE # 505
00C3 300020            JNB     FAIL,?C0041
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
00C6 53C17F            ANL     SMB0CF,#07FH
                                           ; SOURCE LINE # 508
00C9 43C180            ORL     SMB0CF,#080H
                                           ; SOURCE LINE # 509
00CC C2C5              CLR     SMB0CN0_STA
                                           ; SOURCE LINE # 510
00CE C2C4              CLR     SMB0CN0_STO
                                           ; SOURCE LINE # 511
00D0 C2C1              CLR     SMB0CN0_ACK
                                           ; SOURCE LINE # 513
00D2 C200        E     CLR     SMB_BUSY
                                           ; SOURCE LINE # 515
00D4 C200        R     CLR     FAIL
                                           ; SOURCE LINE # 516
00D6 C294              CLR     LED1
                                           ; SOURCE LINE # 518
00D8 900000      E     MOV     DPTR,#NUM_ERRORS+01H
00DB E0                MOVX    A,@DPTR
00DC 04                INC     A
00DD F0                MOVX    @DPTR,A
00DE 7006              JNZ     ?C0046
00E0 900000      E     MOV     DPTR,#NUM_ERRORS
00E3 E0                MOVX    A,@DPTR
00E4 04                INC     A
00E5 F0                MOVX    @DPTR,A
00E6         ?C0046:
                                           ; SOURCE LINE # 519
00E6         ?C0041:
                                           ; SOURCE LINE # 521
00E6 C2C0              CLR     SMB0CN0_SI
                                           ; SOURCE LINE # 522
00E8 D007              POP     AR7
00EA D006              POP     AR6
00EC D0D0              POP     PSW
00EE D082              POP     DPL
00F0 D083              POP     DPH
00F2 D0E0              POP     ACC
00F4 32                RETI    
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/28/2017 18:10:06 PAGE 19  

             ; FUNCTION SMBUS0_ISR (END)

             ; FUNCTION TIMER3_ISR (BEGIN)
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 535
0000 53C17F            ANL     SMB0CF,#07FH
                                           ; SOURCE LINE # 536
0003 43C180            ORL     SMB0CF,#080H
                                           ; SOURCE LINE # 537
0006 53917F            ANL     TMR3CN0,#07FH
                                           ; SOURCE LINE # 539
0009 C2C5              CLR     SMB0CN0_STA
                                           ; SOURCE LINE # 540
000B C200        E     CLR     SMB_BUSY
                                           ; SOURCE LINE # 541
000D 32                RETI    
             ; FUNCTION TIMER3_ISR (END)

             ; FUNCTION UART0_ISR (BEGIN)
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 555
0000 32                RETI    
             ; FUNCTION UART0_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    628    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    263    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
