
#line 1 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\lib\efm8lb1\peripheralDrivers\src\adc_0.c" /0




 
 
  
#line 1 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/peripheral_driver/inc\adc_0.h" /0




 
 
 
 
 
  
#line 1 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\inc\efm8_config.h" /0




 
 
 
 
 
 
 
 
 
#line 10 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/peripheral_driver/inc\adc_0.h" /0
 
  
#line 1 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc\SI_EFM8LB1_Register_Enums.h" /0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
#line 1 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc\SI_EFM8LB1_Defs.h" /0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
#line 1 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\si_toolchain.h" /0




 
 
 
 
 
  
#line 1 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\stdint.h" /0




 
 
 
 
 
 
 
 typedef unsigned char uint8_t;
 typedef unsigned short uint16_t;
 typedef unsigned long uint32_t;
 typedef uint32_t uint64_t[2];
 
 typedef signed char int8_t;
 typedef short int16_t;
 typedef long int32_t;
 typedef int32_t int64_t[2];
 
 
 
#line 24 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\stdint.h" /1
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#line 50 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\stdint.h" /0
 
 
#line 10 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\si_toolchain.h" /0
 
  
#line 1 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\stdbool.h" /0




 
 
 
 
 
 
 
 typedef bit bool;
 enum{
 false = 0,
 true = 1,
 };
 
 
#line 19 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\stdbool.h" /1
 
 
 
 
 
 
 
  
  
  
 
  
 
 
 
 
 
 
 
 
 
 
 
 
#line 43 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\stdbool.h" /0
 
 
 
#line 11 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\si_toolchain.h" /0
 
 





















































 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 




 
 
 









 
 
 










 
 
 










 
 
 
 













 
 
 



















 
 

 














 
 
 


















 
 
 































 
 

 














 
 

 






































 
 

 
















 
 

 




























 
 
 



























 
 

 






























 
 

 





























 
 
 





























 
 

 
 
 
#line 501 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\si_toolchain.h" /1
  
  
  
  
 
  
  
 
  
  
 
 
  
  
  
  
  
 
#line 519 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\si_toolchain.h" /0
 
 
 
 
 
 
 
 
 
 
 
 
 
 typedef union SI_UU16
 {
 uint16_t u16;    
 int16_t s16;     
 uint8_t u8[2];   
 int8_t s8[2];    
 } SI_UU16_t;
 
 
 
 
 typedef union SI_UU32
 {
 uint32_t u32;        
 int32_t s32;         
 SI_UU16_t uu16[2];   
 uint16_t u16[2];     
 int16_t s16[2];      
 uint8_t u8[4];       
 int8_t s8[4];        
 } SI_UU32_t;
 
 
 
 
 
 
 
 
 
 
 
 typedef struct
 {
 uint8_t memtype;     
 SI_UU16_t address;   
 } GPTR_t;
 
 
 
 
 typedef union SI_GEN_PTR
 {
 uint8_t u8[3];     
 GPTR_t gptr;       
 } SI_GEN_PTR_t;
 
 
 extern void _nop_(void);
 
 
 
 
 
 
 
 
#line 589 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\si_toolchain.h" /1
 
 
 
  
  
  
  
  
  
  
 
 
 
 
  
  
  
 
 
 
  
  
  
  
  

  

  
  

  

  
  

 
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
  
 
  
  
  
  
 
  
  
  
  
  
  
  
  
  
 
  
  
  
  
  
  
  
 
 

  

  

 


  

  

 
 
 
 
 
 
 
  

  

 
  
  
  
 
  
 
  
 
  
 
 
 
  
  
  
  
 
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
#line 794 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base\si_toolchain.h" /0
 
 
 
 
#line 44 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc\SI_EFM8LB1_Defs.h" /0
 
 
 
 
 
  sfr ACC = 0xE0;  
  sfr ADC0ASAH = 0xB6;  
  sfr ADC0ASAL = 0xB5;  
  sfr ADC0ASCF = 0xA1;  
  sfr ADC0ASCT = 0xC7;  
  sfr ADC0CF0 = 0xBC;  
  sfr ADC0CF1 = 0xB9;  
  sfr ADC0CF2 = 0xDF;  
  sfr ADC0CN0 = 0xE8;  
  sfr ADC0CN1 = 0xB2;  
  sfr ADC0CN2 = 0xB3;  
  sfr ADC0GTH = 0xC4;  
  sfr ADC0GTL = 0xC3;  
  sfr ADC0H = 0xBE;  
  sfr ADC0L = 0xBD;  
  sfr ADC0LTH = 0xC6;  
  sfr ADC0LTL = 0xC5;  
  sfr ADC0MX = 0xBB;  
  sfr B = 0xF0;  
  sfr CKCON0 = 0x8E;  
  sfr CKCON1 = 0xA6;  
  sfr CLEN0 = 0xC6;  
  sfr CLIE0 = 0xC7;  
  sfr CLIF0 = 0xE8;  
  sfr CLKSEL = 0xA9;  
  sfr CLOUT0 = 0xD1;  
  sfr CLU0CF = 0xB1;  
  sfr CLU0FN = 0xAF;  
  sfr CLU0MX = 0x84;  
  sfr CLU1CF = 0xB3;  
  sfr CLU1FN = 0xB2;  
  sfr CLU1MX = 0x85;  
  sfr CLU2CF = 0xB6;  
  sfr CLU2FN = 0xB5;  
  sfr CLU2MX = 0x91;  
  sfr CLU3CF = 0xBF;  
  sfr CLU3FN = 0xBE;  
  sfr CLU3MX = 0xAE;  
  sfr CMP0CN0 = 0x9B;  
  sfr CMP0CN1 = 0x99;  
  sfr CMP0MD = 0x9D;  
  sfr CMP0MX = 0x9F;  
  sfr CMP1CN0 = 0xBF;  
  sfr CMP1CN1 = 0xAC;  
  sfr CMP1MD = 0xAB;  
  sfr CMP1MX = 0xAA;  
  sfr CRC0CN0 = 0xCE;  
  sfr CRC0CN1 = 0x86;  
  sfr CRC0CNT = 0xD3;  
  sfr CRC0DAT = 0xCB;  
  sfr CRC0FLIP = 0xCF;  
  sfr CRC0IN = 0xCA;  
  sfr CRC0ST = 0xD2;  
  sfr DAC0CF0 = 0x91;  
  sfr DAC0CF1 = 0x92;  
  sfr DAC0H = 0x85;  
  sfr DAC0L = 0x84;  
  sfr DAC1CF0 = 0x93;  
  sfr DAC1CF1 = 0x94;  
  sfr DAC1H = 0x8A;  
  sfr DAC1L = 0x89;  
  sfr DAC2CF0 = 0x95;  
  sfr DAC2CF1 = 0x96;  
  sfr DAC2H = 0x8C;  
  sfr DAC2L = 0x8B;  
  sfr DAC3CF0 = 0x9A;  
  sfr DAC3CF1 = 0x9C;  
  sfr DAC3H = 0x8E;  
  sfr DAC3L = 0x8D;  
  sfr DACGCF0 = 0x88;  
  sfr DACGCF1 = 0x98;  
  sfr DACGCF2 = 0xA2;  
  sfr DERIVID = 0xAD;  
  sfr DEVICEID = 0xB5;  
  sfr DPH = 0x83;  
  sfr DPL = 0x82;  
  sfr EIE1 = 0xE6;  
  sfr EIE2 = 0xF3;  
  sfr EIP1 = 0xBB;  
  sfr EIP1H = 0xEE;  
  sfr EIP2 = 0xED;  
  sfr EIP2H = 0xF6;  
  sfr EMI0CN = 0xE7;  
  sfr FLKEY = 0xB7;  
  sfr HFO0CAL = 0xC7;  
  sfr HFO1CAL = 0xD6;  
  sfr HFOCN = 0xEF;  
  sfr I2C0ADM = 0xFF;  
  sfr I2C0CN0 = 0xBA;  
  sfr I2C0DIN = 0xBC;  
  sfr I2C0DOUT = 0xBB;  
  sfr I2C0FCN0 = 0xAD;  
  sfr I2C0FCN1 = 0xAB;  
  sfr I2C0FCT = 0xF5;  
  sfr I2C0SLAD = 0xBD;  
  sfr I2C0STAT = 0xB9;  
  sfr IE = 0xA8;  
  sfr IP = 0xB8;  
  sfr IPH = 0xF2;  
  sfr IT01CF = 0xE4;  
  sfr LFO0CN = 0xB1;  
  sfr P0 = 0x80;  
  sfr P0MASK = 0xFE;  
  sfr P0MAT = 0xFD;  
  sfr P0MDIN = 0xF1;  
  sfr P0MDOUT = 0xA4;  
  sfr P0SKIP = 0xD4;  
  sfr P1 = 0x90;  
  sfr P1MASK = 0xEE;  
  sfr P1MAT = 0xED;  
  sfr P1MDIN = 0xF2;  
  sfr P1MDOUT = 0xA5;  
  sfr P1SKIP = 0xD5;  
  sfr P2 = 0xA0;  
  sfr P2MASK = 0xFC;  
  sfr P2MAT = 0xFB;  
  sfr P2MDIN = 0xF3;  
  sfr P2MDOUT = 0xA6;  
  sfr P2SKIP = 0xCC;  
  sfr P3 = 0xB0;  
  sfr P3MDIN = 0xF4;  
  sfr P3MDOUT = 0x9C;  
  sfr PCA0CENT = 0x9E;  
  sfr PCA0CLR = 0x9C;  
  sfr PCA0CN0 = 0xD8;  
  sfr PCA0CPH0 = 0xFC;  
  sfr PCA0CPH1 = 0xEA;  
  sfr PCA0CPH2 = 0xEC;  
  sfr PCA0CPH3 = 0xF5;  
  sfr PCA0CPH4 = 0x85;  
  sfr PCA0CPH5 = 0xDE;  
  sfr PCA0CPL0 = 0xFB;  
  sfr PCA0CPL1 = 0xE9;  
  sfr PCA0CPL2 = 0xEB;  
  sfr PCA0CPL3 = 0xF4;  
  sfr PCA0CPL4 = 0x84;  
  sfr PCA0CPL5 = 0xDD;  
  sfr PCA0CPM0 = 0xDA;  
  sfr PCA0CPM1 = 0xDB;  
  sfr PCA0CPM2 = 0xDC;  
  sfr PCA0CPM3 = 0xAE;  
  sfr PCA0CPM4 = 0xAF;  
  sfr PCA0CPM5 = 0xCC;  
  sfr PCA0H = 0xFA;  
  sfr PCA0L = 0xF9;  
  sfr PCA0MD = 0xD9;  
  sfr PCA0POL = 0x96;  
  sfr PCA0PWM = 0xF7;  
  sfr PCON0 = 0x87;  
  sfr PCON1 = 0xCD;  
  sfr PFE0CN = 0xC1;  
  sfr PRTDRV = 0xF6;  
  sfr PSCTL = 0x8F;  
  sfr PSTAT0 = 0xAA;  
  sfr PSW = 0xD0;  
  sfr REF0CN = 0xD1;  
  sfr REG0CN = 0xC9;  
  sfr REVID = 0xB6;  
  sfr RSTSRC = 0xEF;  
  sfr SBCON1 = 0x94;  
  sfr SBRLH1 = 0x96;  
  sfr SBRLL1 = 0x95;  
  sfr SBUF0 = 0x99;  
  sfr SBUF1 = 0x92;  
  sfr SCON0 = 0x98;  
  sfr SCON1 = 0xC8;  
  sfr SFRPAGE = 0xA7;  
  sfr SFRPGCN = 0xBC;  
  sfr SFRSTACK = 0xD7;  
  sfr SMB0ADM = 0xD6;  
  sfr SMB0ADR = 0xD7;  
  sfr SMB0CF = 0xC1;  
  sfr SMB0CN0 = 0xC0;  
  sfr SMB0DAT = 0xC2;  
  sfr SMB0FCN0 = 0xC3;  
  sfr SMB0FCN1 = 0xC4;  
  sfr SMB0FCT = 0xEF;  
  sfr SMB0RXLN = 0xC5;  
  sfr SMB0TC = 0xAC;  
  sfr SMOD1 = 0x93;  
  sfr SP = 0x81;  
  sfr SPI0CFG = 0xA1;  
  sfr SPI0CKR = 0xA2;  
  sfr SPI0CN0 = 0xF8;  
  sfr SPI0DAT = 0xA3;  
  sfr SPI0FCN0 = 0x9A;  
  sfr SPI0FCN1 = 0x9B;  
  sfr SPI0FCT = 0xF7;  
  sfr SPI0PCF = 0xDF;  
  sfr TCON = 0x88;  
  sfr TH0 = 0x8C;  
  sfr TH1 = 0x8D;  
  sfr TL0 = 0x8A;  
  sfr TL1 = 0x8B;  
  sfr TMOD = 0x89;  
  sfr TMR2CN0 = 0xC8;  
  sfr TMR2CN1 = 0xFD;  
  sfr TMR2H = 0xCF;  
  sfr TMR2L = 0xCE;  
  sfr TMR2RLH = 0xCB;  
  sfr TMR2RLL = 0xCA;  
  sfr TMR3CN0 = 0x91;  
  sfr TMR3CN1 = 0xFE;  
  sfr TMR3H = 0x95;  
  sfr TMR3L = 0x94;  
  sfr TMR3RLH = 0x93;  
  sfr TMR3RLL = 0x92;  
  sfr TMR4CN0 = 0x98;  
  sfr TMR4CN1 = 0xFF;  
  sfr TMR4H = 0xA5;  
  sfr TMR4L = 0xA4;  
  sfr TMR4RLH = 0xA3;  
  sfr TMR4RLL = 0xA2;  
  sfr TMR5CN0 = 0xC0;  
  sfr TMR5CN1 = 0xF1;  
  sfr TMR5H = 0xD5;  
  sfr TMR5L = 0xD4;  
  sfr TMR5RLH = 0xD3;  
  sfr TMR5RLL = 0xD2;  
  sfr UART0PCF = 0xD9;  
  sfr UART1FCN0 = 0x9D;  
  sfr UART1FCN1 = 0xD8;  
  sfr UART1FCT = 0xFA;  
  sfr UART1LIN = 0x9E;  
  sfr UART1PCF = 0xDA;  
  sfr VDM0CN = 0xFF;  
  sfr WDTCN = 0x97;  
  sfr XBR0 = 0xE1;  
  sfr XBR1 = 0xE2;  
  sfr XBR2 = 0xE3;  
  sfr XOSC0CN = 0x86;  
 
 
 
 
  sfr16 ADC0ASA = 0xB5;  
  sfr16 ADC0GT = 0xC3;  
  sfr16 ADC0 = 0xBD;  
  sfr16 ADC0LT = 0xC5;  
  sfr16 DP = 0x82;  
  sfr16 PCA0CP0 = 0xFB;  
  sfr16 PCA0CP1 = 0xE9;  
  sfr16 PCA0CP2 = 0xEB;  
  sfr16 PCA0CP3 = 0xF4;  
  sfr16 PCA0CP4 = 0x84;  
  sfr16 PCA0CP5 = 0xDD;  
  sfr16 PCA0 = 0xF9;  
  sfr16 TMR2 = 0xCE;  
  sfr16 TMR2RL = 0xCA;  
  sfr16 TMR3 = 0x94;  
  sfr16 TMR3RL = 0x92;  
  sfr16 TMR4 = 0xA4;  
  sfr16 TMR4RL = 0xA2;  
  sfr16 TMR5 = 0xD4;  
  sfr16 TMR5RL = 0xD2;  
 
 
 
 
 
 
 
 
 
 
 
  sbit ACC_ACC0 = 0xE0^0;  
  sbit ACC_ACC1 = 0xE0^1;  
  sbit ACC_ACC2 = 0xE0^2;  
  sbit ACC_ACC3 = 0xE0^3;  
  sbit ACC_ACC4 = 0xE0^4;  
  sbit ACC_ACC5 = 0xE0^5;  
  sbit ACC_ACC6 = 0xE0^6;  
  sbit ACC_ACC7 = 0xE0^7;  
 
 
 
  sbit ADC0CN0_TEMPE = 0xE8^0;  
  sbit ADC0CN0_ADGN0 = 0xE8^1;  
  sbit ADC0CN0_ADGN1 = 0xE8^2;  
  sbit ADC0CN0_ADWINT = 0xE8^3;  
  sbit ADC0CN0_ADBUSY = 0xE8^4;  
  sbit ADC0CN0_ADINT = 0xE8^5;  
  sbit ADC0CN0_IPOEN = 0xE8^6;  
  sbit ADC0CN0_ADEN = 0xE8^7;  
 
 
 
  sbit B_B0 = 0xF0^0;  
  sbit B_B1 = 0xF0^1;  
  sbit B_B2 = 0xF0^2;  
  sbit B_B3 = 0xF0^3;  
  sbit B_B4 = 0xF0^4;  
  sbit B_B5 = 0xF0^5;  
  sbit B_B6 = 0xF0^6;  
  sbit B_B7 = 0xF0^7;  
 
 
 
  sbit CLIF0_C0FIF = 0xE8^0;  
  sbit CLIF0_C0RIF = 0xE8^1;  
  sbit CLIF0_C1FIF = 0xE8^2;  
  sbit CLIF0_C1RIF = 0xE8^3;  
  sbit CLIF0_C2FIF = 0xE8^4;  
  sbit CLIF0_C2RIF = 0xE8^5;  
  sbit CLIF0_C3FIF = 0xE8^6;  
  sbit CLIF0_C3RIF = 0xE8^7;  
 
 
 
  sbit DACGCF0_D1SRC0 = 0x88^0;  
  sbit DACGCF0_D1SRC1 = 0x88^1;  
  sbit DACGCF0_D1AMEN = 0x88^2;  
  sbit DACGCF0_D01REFSL = 0x88^3;  
  sbit DACGCF0_D3SRC0 = 0x88^4;  
  sbit DACGCF0_D3SRC1 = 0x88^5;  
  sbit DACGCF0_D3AMEN = 0x88^6;  
  sbit DACGCF0_D23REFSL = 0x88^7;  
 
 
 
  sbit DACGCF1_D0UDIS = 0x98^0;  
  sbit DACGCF1_D1UDIS = 0x98^1;  
  sbit DACGCF1_D2UDIS = 0x98^2;  
  sbit DACGCF1_D3UDIS = 0x98^3;  
 
 
 
  sbit IE_EX0 = 0xA8^0;  
  sbit IE_ET0 = 0xA8^1;  
  sbit IE_EX1 = 0xA8^2;  
  sbit IE_ET1 = 0xA8^3;  
  sbit IE_ES0 = 0xA8^4;  
  sbit IE_ET2 = 0xA8^5;  
  sbit IE_ESPI0 = 0xA8^6;  
  sbit IE_EA = 0xA8^7;  
 
 
 
  sbit IP_PX0 = 0xB8^0;  
  sbit IP_PT0 = 0xB8^1;  
  sbit IP_PX1 = 0xB8^2;  
  sbit IP_PT1 = 0xB8^3;  
  sbit IP_PS0 = 0xB8^4;  
  sbit IP_PT2 = 0xB8^5;  
  sbit IP_PSPI0 = 0xB8^6;  
 
 
 
  sbit P0_B0 = 0x80^0;  
  sbit P0_B1 = 0x80^1;  
  sbit P0_B2 = 0x80^2;  
  sbit P0_B3 = 0x80^3;  
  sbit P0_B4 = 0x80^4;  
  sbit P0_B5 = 0x80^5;  
  sbit P0_B6 = 0x80^6;  
  sbit P0_B7 = 0x80^7;  
 
 
 
  sbit P1_B0 = 0x90^0;  
  sbit P1_B1 = 0x90^1;  
  sbit P1_B2 = 0x90^2;  
  sbit P1_B3 = 0x90^3;  
  sbit P1_B4 = 0x90^4;  
  sbit P1_B5 = 0x90^5;  
  sbit P1_B6 = 0x90^6;  
  sbit P1_B7 = 0x90^7;  
 
 
 
  sbit P2_B0 = 0xA0^0;  
  sbit P2_B1 = 0xA0^1;  
  sbit P2_B2 = 0xA0^2;  
  sbit P2_B3 = 0xA0^3;  
  sbit P2_B4 = 0xA0^4;  
  sbit P2_B5 = 0xA0^5;  
  sbit P2_B6 = 0xA0^6;  
 
 
 
  sbit P3_B0 = 0xB0^0;  
  sbit P3_B1 = 0xB0^1;  
  sbit P3_B2 = 0xB0^2;  
  sbit P3_B3 = 0xB0^3;  
  sbit P3_B4 = 0xB0^4;  
  sbit P3_B7 = 0xB0^7;  
 
 
 
  sbit PCA0CN0_CCF0 = 0xD8^0;  
  sbit PCA0CN0_CCF1 = 0xD8^1;  
  sbit PCA0CN0_CCF2 = 0xD8^2;  
  sbit PCA0CN0_CCF3 = 0xD8^3;  
  sbit PCA0CN0_CCF4 = 0xD8^4;  
  sbit PCA0CN0_CCF5 = 0xD8^5;  
  sbit PCA0CN0_CR = 0xD8^6;  
  sbit PCA0CN0_CF = 0xD8^7;  
 
 
 
  sbit PSW_PARITY = 0xD0^0;  
  sbit PSW_F1 = 0xD0^1;  
  sbit PSW_OV = 0xD0^2;  
  sbit PSW_RS0 = 0xD0^3;  
  sbit PSW_RS1 = 0xD0^4;  
  sbit PSW_F0 = 0xD0^5;  
  sbit PSW_AC = 0xD0^6;  
  sbit PSW_CY = 0xD0^7;  
 
 
 
  sbit SCON0_RI = 0x98^0;  
  sbit SCON0_TI = 0x98^1;  
  sbit SCON0_RB8 = 0x98^2;  
  sbit SCON0_TB8 = 0x98^3;  
  sbit SCON0_REN = 0x98^4;  
  sbit SCON0_MCE = 0x98^5;  
  sbit SCON0_SMODE = 0x98^7;  
 
 
 
  sbit SCON1_RI = 0xC8^0;  
  sbit SCON1_TI = 0xC8^1;  
  sbit SCON1_RBX = 0xC8^2;  
  sbit SCON1_TBX = 0xC8^3;  
  sbit SCON1_REN = 0xC8^4;  
  sbit SCON1_PERR = 0xC8^6;  
  sbit SCON1_OVR = 0xC8^7;  
 
 
 
  sbit SMB0CN0_SI = 0xC0^0;  
  sbit SMB0CN0_ACK = 0xC0^1;  
  sbit SMB0CN0_ARBLOST = 0xC0^2;  
  sbit SMB0CN0_ACKRQ = 0xC0^3;  
  sbit SMB0CN0_STO = 0xC0^4;  
  sbit SMB0CN0_STA = 0xC0^5;  
  sbit SMB0CN0_TXMODE = 0xC0^6;  
  sbit SMB0CN0_MASTER = 0xC0^7;  
 
 
 
  sbit SPI0CN0_SPIEN = 0xF8^0;  
  sbit SPI0CN0_TXNF = 0xF8^1;  
  sbit SPI0CN0_NSSMD0 = 0xF8^2;  
  sbit SPI0CN0_NSSMD1 = 0xF8^3;  
  sbit SPI0CN0_RXOVRN = 0xF8^4;  
  sbit SPI0CN0_MODF = 0xF8^5;  
  sbit SPI0CN0_WCOL = 0xF8^6;  
  sbit SPI0CN0_SPIF = 0xF8^7;  
 
 
 
  sbit TCON_IT0 = 0x88^0;  
  sbit TCON_IE0 = 0x88^1;  
  sbit TCON_IT1 = 0x88^2;  
  sbit TCON_IE1 = 0x88^3;  
  sbit TCON_TR0 = 0x88^4;  
  sbit TCON_TF0 = 0x88^5;  
  sbit TCON_TR1 = 0x88^6;  
  sbit TCON_TF1 = 0x88^7;  
 
 
 
  sbit TMR2CN0_T2XCLK0 = 0xC8^0;  
  sbit TMR2CN0_T2XCLK1 = 0xC8^1;  
  sbit TMR2CN0_TR2 = 0xC8^2;  
  sbit TMR2CN0_T2SPLIT = 0xC8^3;  
  sbit TMR2CN0_TF2CEN = 0xC8^4;  
  sbit TMR2CN0_TF2LEN = 0xC8^5;  
  sbit TMR2CN0_TF2L = 0xC8^6;  
  sbit TMR2CN0_TF2H = 0xC8^7;  
 
 
 
  sbit TMR4CN0_T4XCLK0 = 0x98^0;  
  sbit TMR4CN0_T4XCLK1 = 0x98^1;  
  sbit TMR4CN0_TR4 = 0x98^2;  
  sbit TMR4CN0_T4SPLIT = 0x98^3;  
  sbit TMR4CN0_TF4CEN = 0x98^4;  
  sbit TMR4CN0_TF4LEN = 0x98^5;  
  sbit TMR4CN0_TF4L = 0x98^6;  
  sbit TMR4CN0_TF4H = 0x98^7;  
 
 
 
  sbit TMR5CN0_T5XCLK0 = 0xC0^0;  
  sbit TMR5CN0_T5XCLK1 = 0xC0^1;  
  sbit TMR5CN0_TR5 = 0xC0^2;  
  sbit TMR5CN0_T5SPLIT = 0xC0^3;  
  sbit TMR5CN0_TF5CEN = 0xC0^4;  
  sbit TMR5CN0_TF5LEN = 0xC0^5;  
  sbit TMR5CN0_TF5L = 0xC0^6;  
  sbit TMR5CN0_TF5H = 0xC0^7;  
 
 
 
  sbit UART1FCN1_RIE = 0xD8^0;  
  sbit UART1FCN1_RXTO0 = 0xD8^1;  
  sbit UART1FCN1_RXTO1 = 0xD8^2;  
  sbit UART1FCN1_RFRQ = 0xD8^3;  
  sbit UART1FCN1_TIE = 0xD8^4;  
  sbit UART1FCN1_TXHOLD = 0xD8^5;  
  sbit UART1FCN1_TXNF = 0xD8^6;  
  sbit UART1FCN1_TFRQ = 0xD8^7;  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#line 593 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc\SI_EFM8LB1_Defs.h" /1
 
 
 
 
#line 597 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc\SI_EFM8LB1_Defs.h" /0
 
 
 
 
#line 45 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/inc\SI_EFM8LB1_Register_Enums.h" /0
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#line 11 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/peripheral_driver/inc\adc_0.h" /0
 
 
 













 
 

















 
 








































































 
 




























































































































































 
 
 











 
 











 










 
 








 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



 
 
 
 typedef enum {
 ADC0_CONVERSION_START_MANUAL    = 0x00,  
 ADC0_CONVERSION_START_TIMER0    = 0x01,  
 ADC0_CONVERSION_START_TIMER2    = 0x02,  
 ADC0_CONVERSION_START_TIMER3    = 0x03,  
 ADC0_CONVERSION_START_CNVSTR    = 0x04,  
 ADC0_CONVERSION_START_CEX5      = 0x05,    
 ADC0_CONVERSION_START_TIMER4    = 0x06,  
 ADC0_CONVERSION_START_TIMER5    = 0x07,  
 ADC0_CONVERSION_START_CLU0      = 0x08,    
 ADC0_CONVERSION_START_CLU1      = 0x09,    
 ADC0_CONVERSION_START_CLU2      = 0x0A,    
 ADC0_CONVERSION_START_CLU3      = 0x0B,    
 }ADC0_ConversionStart_t ;
 
 
 typedef enum {
 ADC0_RESOLUTION_10_BIT = 0x00,  
 ADC0_RESOLUTION_12_BIT = 0x40,  
 ADC0_RESOLUTION_14_BIT = 0x80,  
 } ADC0_Resolution_t;
 


















 
 void ADC0_init(ADC0_ConversionStart_t convStart, 
 ADC0_Resolution_t resolution,
 uint32_t sysclk);
 
 
 
 



 
 



 
 
 
 
 
 












 
 uint8_t ADC0_getIntFlags(void);
 












 
 void ADC0_clearIntFlags(uint8_t flags);
 
















 
 void ADC0_enableInt(uint8_t flags, bool enable);
 






 
 void ADC0_enable(void);
 







 
 void ADC0_disable(void);
 
 
 typedef enum {
 ADC0_POSITIVE_INPUT_P0,  
 ADC0_POSITIVE_INPUT_P1,  
 ADC0_POSITIVE_INPUT_P2,  
 ADC0_POSITIVE_INPUT_P3,  
 ADC0_POSITIVE_INPUT_P4,  
 ADC0_POSITIVE_INPUT_P5,  
 ADC0_POSITIVE_INPUT_P6,  
 ADC0_POSITIVE_INPUT_P7,  
 ADC0_POSITIVE_INPUT_P8,  
 ADC0_POSITIVE_INPUT_P9,  
 ADC0_POSITIVE_INPUT_P10,  
 ADC0_POSITIVE_INPUT_P11,  
 ADC0_POSITIVE_INPUT_P12,  
 ADC0_POSITIVE_INPUT_P13,  
 ADC0_POSITIVE_INPUT_P14,  
 ADC0_POSITIVE_INPUT_P15,  
 ADC0_POSITIVE_INPUT_P16,  
 ADC0_POSITIVE_INPUT_P17,  
 ADC0_POSITIVE_INPUT_P18,  
 ADC0_POSITIVE_INPUT_P19,  
 ADC0_POSITIVE_INPUT_TEMP,  
 ADC0_POSITIVE_INPUT_LDO_OUT,  
 ADC0_POSITIVE_INPUT_VDD,  
 ADC0_POSITIVE_INPUT_GND,  
 ADC0_POSITIVE_INPUT_NONE = 31,  
 }ADC0_PositiveInput_t;
 







 
 void ADC0_setPositiveInput(ADC0_PositiveInput_t input);
 



 
 








 
 void ADC0_startConversion(void);
 












 
 bool ADC0_isConversionComplete(void);
 









 
 uint16_t ADC0_getResult(void);
 



















 
 void ADC0_setWindowCompare(uint16_t lessThan, uint16_t greaterThan);
 
 








 















 
 void ADC0_setAutoscanInputs(ADC0_PositiveInput_t startChannel,
 uint8_t numChannels);  
 
 
 typedef enum {
 ADC0_AUTOSCAN_MODE_SINGLE,  
 ADC0_AUTOSCAN_MODE_CONTINUOUS,  
 }ADC0_AutoscanMode_t;
 
 
 
#line 623 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/peripheral_driver/inc\adc_0.h" /1
 
 
#line 625 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/peripheral_driver/inc\adc_0.h" /0
 typedef uint16_t xdata ADC0_AutoscanBuffer_t;
 

















 
 



 















 
 void ADC0_enableAutoscan(const ADC0_AutoscanBuffer_t * buffer,
 uint8_t numElements,  
 ADC0_AutoscanMode_t mode); 
 







 
 const ADC0_AutoscanBuffer_t * ADC0_getNextAutoscanBuffer(void);
 












 
 void ADC0_setNextAutoscanBuffer(const ADC0_AutoscanBuffer_t * buffer,
 uint8_t numElements);  
 




 
 void ADC0_disableAutoscan(void);
 
 
 
 
 
 
#line 7 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\lib\efm8lb1\peripheralDrivers\src\adc_0.c" /0
 
  
#line 1 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Lib/efm8_assert\assert.h" /0




 
 
 
 
  
#line 1 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\inc\efm8_config.h" /0




 
 
 
#line 8 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\inc\efm8_config.h" /1
  
 
  
 
 
#line 13 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\inc\efm8_config.h" /0
 
#line 9 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Lib/efm8_assert\assert.h" /0
 
 









 
 
 






 
 








 
 





 
 
 
#line 49 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Lib/efm8_assert\assert.h" /1
  
 
#line 51 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Lib/efm8_assert\assert.h" /0
 
#line 52 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Lib/efm8_assert\assert.h" /1
  
 
#line 54 "C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Lib/efm8_assert\assert.h" /0
 void slab_Assert();
 
 
 
 
 
 
#line 8 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\lib\efm8lb1\peripheralDrivers\src\adc_0.c" /0
 
 
 
 
 
 
 




 
 



 
#line 25 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\lib\efm8lb1\peripheralDrivers\src\adc_0.c" /1
  
  
  
 
#line 29 "D:\WorkSpace\MyCode\SILICON_WORKSPACE\GE_EFM8LB12F64E-B-QFN32_YJ\lib\efm8lb1\peripheralDrivers\src\adc_0.c" /0
 
 
 
 
 
 
 
 
 void ADC0_init(ADC0_ConversionStart_t convStart,
 ADC0_Resolution_t resolution,
 uint32_t sysclk)
 {
 uint8_t divider;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 
  if(sysclk <= 75000000UL){}else{slab_Assert();};
 
 
 divider = 0; 
 while(sysclk > 18000000UL * (divider + 1))
 {
 divider++;
 }
 
 ADC0CN0 = 0x04;
 ADC0CN1 = resolution | 0x00 | 0x00;
 ADC0CN2 = convStart | 0x00;
 
 ADC0CF0 = (divider << 0x03) | 0x00;
 
 
 ADC0CF1 = 5 << 0x00;
 
 
 ADC0CN0_ADEN = 1;
  do { SFRPAGE = savedPage; } while(0);
 }
 
 
 uint8_t ADC0_getIntFlags()
 {
 uint8_t val;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 val = ADC0CN0 & (0x20 | 0x08);
  do { SFRPAGE = savedPage; } while(0);
 return val;
 }
 
 void ADC0_clearIntFlags(uint8_t flags)
 {
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 
  if(flags & (0x20 | 0x08)){}else{slab_Assert();};
 
 ADC0CN0 &= ~(flags & (0x20 | 0x08));
  do { SFRPAGE = savedPage; } while(0);
 }
 
 void ADC0_enableInt(uint8_t flags, bool enable)
 {
 uint8_t en;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x00); } while(0);
 
 
  if(flags & (0x20 | 0x08)){}else{slab_Assert();};
 
 en = (uint8_t) enable;
 
 if (flags & 0x20)
 {
 EIE1 &= ~0x08;
 EIE1 |= en << 0x03;
 }
 
 if (flags & 0x08)
 {
 EIE1 &= ~0x04;
 EIE1 |= en << 0x02;
 }
  do { SFRPAGE = savedPage; } while(0);
 }
 
 
 void ADC0_enable(void)
 {
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 ADC0CN0_ADEN = 1;
  do { SFRPAGE = savedPage; } while(0);
 }
 
 void ADC0_disable(void)
 {
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 ADC0CN0_ADEN = 0;
  do { SFRPAGE = savedPage; } while(0);
 }
 
 void ADC0_setPositiveInput(ADC0_PositiveInput_t input)
 {
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 
 if (input == ADC0_POSITIVE_INPUT_TEMP)
 {
  ADC0CN0_TEMPE = 1;
 }
 else
 {
  ADC0CN0_TEMPE = 0;
 }
 
 ADC0MX = input;
  do { SFRPAGE = savedPage; } while(0);
 }
 
 void ADC0_startConversion(void)
 {
 uint8_t ADCM_save;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 
 ADCM_save = ADC0CN2 & 0x0F;
 ADC0CN2 = (ADC0CN2 & ~0x0F) | 0x00;
 
 
 ADC0CN0_ADINT = 0;
 
 
 ADC0CN0_ADBUSY = 1;
 
 
 ADC0CN2 |= ADCM_save;
  do { SFRPAGE = savedPage; } while(0);
 }
 
 bool ADC0_isConversionComplete(void)
 {
 bool conversionComplete;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 conversionComplete = ADC0CN0_ADINT;
  do { SFRPAGE = savedPage; } while(0);
 return conversionComplete;
 }
 
 uint16_t ADC0_getResult(void)
 {
 uint16_t result;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 result = ADC0;
  do { SFRPAGE = savedPage; } while(0);
 return result;
 }
 
 void ADC0_setWindowCompare(uint16_t lessThan, uint16_t greaterThan)
 {
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 ADC0LT = lessThan;
 ADC0GT = greaterThan;
  do { SFRPAGE = savedPage; } while(0);
 }
 
 
 void ADC0_setAutoscanInputs(ADC0_PositiveInput_t startChannel,
 uint8_t numChannels)
 {
 uint8_t endChannel;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 
  if(numChannels <= 4 && numChannels >= 1){}else{slab_Assert();};
 
 
 numChannels -= 1;
 
 ADC0ASCF = (ADC0ASCF & ~0x03) | numChannels;
 
 endChannel = startChannel + numChannels;
 
 
  if(endChannel <= ADC0_POSITIVE_INPUT_NONE){}else{slab_Assert();};
 
 
 if (startChannel <= ADC0_POSITIVE_INPUT_TEMP
 && endChannel >= ADC0_POSITIVE_INPUT_TEMP)
 {
  ADC0CN0_TEMPE = 1;
 }
 else
 {
  ADC0CN0_TEMPE = 0;
 }
 
 ADC0MX = startChannel;
 
  do { SFRPAGE = savedPage; } while(0);
 }
 
 void ADC0_enableAutoscan(const ADC0_AutoscanBuffer_t * buffer,
 uint8_t numElements,  
 ADC0_AutoscanMode_t mode)
 {
 uint8_t ADCM_save;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 
 ADCM_save = ADC0CN2 & 0x0F;
 ADC0CN2 = (ADC0CN2 & ~0x0F) | 0x00;
 
 
 ADC0_setNextAutoscanBuffer(buffer, numElements);
 ADC0ASCF |= 0x80;
 
 
 
 
 if (mode == ADC0_AUTOSCAN_MODE_SINGLE)
 {
 ADC0_disableAutoscan();
 }
 
 
 ADC0CN2 |= ADCM_save;
  do { SFRPAGE = savedPage; } while(0);
 }
 
 const ADC0_AutoscanBuffer_t * ADC0_getNextAutoscanBuffer(void)
 {
 const ADC0_AutoscanBuffer_t * buffer;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 buffer = (ADC0_AutoscanBuffer_t *)(((ADC0ASAH & 0x0F) << 8) | (ADC0ASAL & 0xFE));
 
  do { SFRPAGE = savedPage; } while(0);
 return buffer;
 }
 
 void ADC0_setNextAutoscanBuffer(const ADC0_AutoscanBuffer_t * buffer,
 uint8_t numElements)
 {
 uint16_t addr = (uint16_t)buffer;
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 
  if(!(addr & 0x01)){}else{slab_Assert();};
 
 
 ADC0ASAH = (ADC0ASAH & ~0x0F) | ((addr >> 8) & 0x0F);
 ADC0ASAL = (ADC0ASAL & ~0xFE) | (addr & 0xFE);
 
 
  if(numElements <= 64 && numElements >= 1){}else{slab_Assert();};
 
 
 numElements -= 1;
 
 
 ADC0ASCT = (ADC0ASCT & ~0x3F) | numElements;
 
  do { SFRPAGE = savedPage; } while(0);
 }
 
 void ADC0_disableAutoscan(void)
 {
  uint8_t savedPage;
  do { savedPage = SFRPAGE; SFRPAGE = (0x30); } while(0);
 
 ADC0ASCF &= ~0x80;
 
  do { SFRPAGE = savedPage; } while(0);
 }
 
